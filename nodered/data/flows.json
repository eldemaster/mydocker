[
    {
        "id": "3b7e464203938ea3",
        "type": "tab",
        "label": "Flow 1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "951a64b45b2c724e",
        "type": "tab",
        "label": "Flow 2",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "f1e60222a97afb6f",
        "type": "tab",
        "label": "Flow 3",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "eedd3d41d491ab0e",
        "type": "tab",
        "label": "Flow 4",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "20bce6ff5edcf012",
        "type": "tab",
        "label": "Debugging",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "6fbff0445efb9605",
        "type": "tab",
        "label": "Mappings",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "e0de3458817306f8",
        "type": "tab",
        "label": "MQTT Broker",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "84a7a2e619383c7d",
        "type": "tab",
        "label": "DB Maintenance",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "a7c2a0369c53c7c5",
        "type": "tab",
        "label": "OPC UA - PLC",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "587d0a516f150445",
        "type": "tab",
        "label": "OPC UA - Simotion",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "03654dd256085b95",
        "type": "tab",
        "label": "DB Feature Engineering",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "1de34fd22f280d68",
        "type": "tab",
        "label": "Flow 5",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "a3aef14032aa8402",
        "type": "subflow",
        "name": "DataService Write",
        "info": "# DataService Write Variables\n\nSubflow that implements all the APIs needed to Write variables data to DataService Edge App.\n\n### Input Message\n\nTo write one or more variables, the input message has to be an **Array of Objects** where **variableName** and **values** properties has to be specified fo each variable to write.\n\nThe property **variablesName** has to be in the format `\"asset_name\".\"variable_name\"`.\nFor example, to write a variable called **CH1** in the Asset **MyDevice** use **MyDevice.CH1**.\n\nThe property **values** is an array of object where each datapoint **value**, **timestamp** and **qualitycode** properties has to be specified.\nThe timestamp property has to be in ISO Format (e.g. `2022-08-11T13:48:34.064Z`).\nUse the qualitycode property `192` for writing good datapoints.\n\n**Example input:**\n\n```json\n[\n    {\n        \"variableName\":\"MyDevice.CH1\",\n        \"values\":[\n            {\n                \"qualitycode\":192,\n                \"timestamp\":\"2022-08-11T13:48:34.064Z\",\n                \"value\":114\n            }\n        ]\n    },\n    {\n        \"variableName\":\"MyDevice.CH2\",\n        \"values\":[\n            {\n            \"qualitycode\":192,\n            \"timestamp\":\"2022-08-11T13:48:34.064Z\",\n            \"value\":100\n            }\n        ]\n    }\n]\n```\n\n### Output\n\nThe node will return a messsage with the following properties:\n\n- **payload:** `true` if data write is successfully, `false` if there was an error.\n- **queryTime:** number of milliseconds elapsed for the write query\n- **variablesNames:** array of the requested variables\n- **variablesIds:** array of ids of the requested variables \n\n**Example output:**\n\n```json\n{\n    \"payload\": true,\n    \"queryTime\":482,\n    \"variablesNames\":[\n        \"MyDevice.CH1\",\n        \"MyDevice.CH2\"\n    ],\n    \"variablesIds\":[\n        \"56b571010bac431e91cd7f5bd9abef7c\",\n        \"ca0c7878698e4885a09782f02516ab35\"\n    ]\n}\n```\n\n",
        "category": "DataService",
        "in": [
            {
                "x": 100,
                "y": 340,
                "wires": [
                    {
                        "id": "6727be51c0f66cdc"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1140,
                "y": 520,
                "wires": [
                    {
                        "id": "ce93ae50a5102796",
                        "port": 2
                    }
                ]
            }
        ],
        "env": [],
        "meta": {
            "module": "DataServiceWriteVariables",
            "version": "0.0.2",
            "desc": "Subflow that implements all the APIs needed to Write variables data to DataService Edge App",
            "keywords": "dataservice, variables, write",
            "license": "MIT"
        },
        "color": "#A6BBCF",
        "icon": "node-red/leveldb.png",
        "status": {
            "x": 1140,
            "y": 360,
            "wires": [
                {
                    "id": "64359736a111ec83",
                    "port": 0
                },
                {
                    "id": "cfaa8e97253ec65e",
                    "port": 0
                },
                {
                    "id": "ce93ae50a5102796",
                    "port": 1
                }
            ]
        }
    },
    {
        "id": "38742bb91ad9d5fc",
        "type": "subflow",
        "name": "DataService Read",
        "info": "# DataService Read Variables\n\nSubflow that implements all the APIs needed to read variables data from DataService Edge App based on their **names**, a **from date** and a **to date**.\n\n### Configuration\n\nConfigure the variables names to be readed in the property **Variables Names** of the node in the format `asset_name.variable_name` separated by commas (no spaces between names and commas, e.g. `MyDevice.CH1,MyDevice.CH2`).\nFor example, to read a variable called **CH1** from the Asset **MyDevice** use **MyDevice.CH1**.\n\n### Input Message\n\nSend the start and end time of the data query by the properties **from** and **to** in the input message.\nBoth dates has to be in ISO Format (e.g. `2022-08-11T13:48:34.064Z`).\n\n**Example input:**\n\n```json\n{\n    \"from\": \"2021-10-10T15:00:00.000Z\",\n    \"to\": \"2021-10-10T20:00:00.000Z\"\n}\n```\n\n### Output\n\nThe node will return a message with the following properties:\n\n- **payload:** object that contains the values and timestamps for each requested variable\n- **queryTime:** number of milliseconds elapsed for the query\n- **variablesNames:** array of the requested variables\n- **variablesIds:** array of ids of the requested variables \n\n**Example output:**\n\n```json\n{\n    \"payload\":{\n        \"MyDevice.CH1\":[\n            {\n                \"timestamp\":\"2022-08-10T11:42:54.506Z\",\n                \"value\":11697,\n                \"qualitycode\":192\n            },\n            {\n                \"timestamp\":\"2022-08-10T11:42:55.506Z\",\n                \"value\":14829,\n                \"qualitycode\":192\n            }\n        ],\n        \"MyDevice.CH2\":[\n            {\n                \"timestamp\":\"2022-08-10T11:42:54.506Z\",\n                \"value\":12514,\n                \"qualitycode\":192\n            },\n            {\n                \"timestamp\":\"2022-08-10T11:42:55.506Z\",\n                \"value\":11298,\n                \"qualitycode\":192\n            }\n        ]},\n        \"queryTime\":482,\n        \"variablesNames\":[\n            \"MyDevice.CH1\",\n            \"MyDevice.CH2\"\n        ],\n        \"variablesIds\":[\n            \"56b571010bac431e91cd7f5bd9abef7c\",\n            \"ca0c7878698e4885a09782f02516ab35\"\n        ]\n}\n```\n\n",
        "category": "DataService",
        "in": [
            {
                "x": 100,
                "y": 340,
                "wires": [
                    {
                        "id": "f64d0811e72a5d32"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 940,
                "y": 580,
                "wires": [
                    {
                        "id": "1e90d1846fd550eb",
                        "port": 2
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "readVariablesNames",
                "type": "str",
                "value": "",
                "ui": {
                    "icon": "font-awesome/fa-tags",
                    "label": {
                        "en-US": "Variables Names"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env"
                        ]
                    }
                }
            }
        ],
        "meta": {
            "module": "DataServiceReadVariables",
            "version": "0.0.2",
            "desc": "Subflow that implements all the APIs needed to Read variables data from DataService Edge App",
            "keywords": "dataservice, variables, read",
            "license": "MIT"
        },
        "color": "#A6BBCF",
        "icon": "node-red/leveldb.png",
        "status": {
            "x": 1120,
            "y": 520,
            "wires": [
                {
                    "id": "fc41b543821343df",
                    "port": 0
                },
                {
                    "id": "1e90d1846fd550eb",
                    "port": 1
                }
            ]
        }
    },
    {
        "id": "30f445478da1a215",
        "type": "group",
        "z": "6fbff0445efb9605",
        "name": "Control Modules Mapping",
        "style": {
            "stroke": "#0070c0",
            "fill": "#bfdbef",
            "label": true,
            "label-position": "n",
            "color": "#0070c0",
            "fill-opacity": "0.5"
        },
        "nodes": [
            "870fb7a8e43c680d",
            "903764ec8de30761",
            "570f3127e529ded3",
            "ab61c0ca8d72bfb7",
            "93dda6cd4eec0411",
            "108accbc562305e2",
            "574dcc882d63edd9",
            "57b88f4783604412",
            "4369396003d89155",
            "121ceb9e1829fa99",
            "669494497bf7927c",
            "5608d68176137bce",
            "09cf7f311fa6913f",
            "20bf811fdeb817a8",
            "abbd7ddda43222e3",
            "b72f9aaea67edec8",
            "b8438f3a712d4434",
            "c6e87436e0e9e2ac",
            "4174d43ce63ab89b",
            "2b95dd054c1b9c65",
            "211d04a9ee710611"
        ],
        "x": 194,
        "y": 119,
        "w": 1192,
        "h": 582
    },
    {
        "id": "2a888de502a80571",
        "type": "group",
        "z": "6fbff0445efb9605",
        "name": "Control Modules Variables Mapping",
        "style": {
            "stroke": "#6f2fa0",
            "fill": "#dbcbe7",
            "fill-opacity": "0.5",
            "label": true,
            "label-position": "n",
            "color": "#6f2fa0"
        },
        "nodes": [
            "d7143c56bc3701ee",
            "1212e8146abc9193",
            "f81f1285669d068d"
        ],
        "x": 194,
        "y": 719,
        "w": 632,
        "h": 82
    },
    {
        "id": "d9c15fa3808c3bc1",
        "type": "group",
        "z": "6fbff0445efb9605",
        "name": "Constants Mapping",
        "style": {
            "stroke": "#004e00",
            "fill": "#e3f3d3",
            "fill-opacity": "0.5",
            "label": true,
            "label-position": "n",
            "color": "#004e00"
        },
        "nodes": [
            "9ae8a7d7ec563abe",
            "8b08e82dab297356"
        ],
        "x": 194,
        "y": 19,
        "w": 512,
        "h": 82
    },
    {
        "id": "0e88c252fea2e9db",
        "type": "group",
        "z": "84a7a2e619383c7d",
        "name": "Statistics Retention Policies",
        "style": {
            "stroke": "#ff0000",
            "fill": "#ffbfbf",
            "fill-opacity": "0.5",
            "label": true,
            "label-position": "n",
            "color": "#ff0000"
        },
        "nodes": [
            "bd4509f685f9c8a1",
            "7f5b4427df8055d9",
            "5cd39a08e3f3f749",
            "d577523794e99d36",
            "1690b2b56bad7331",
            "0ddc6d0ae8db5245",
            "44d2f03036b29307",
            "c889a282b3c8a9bf",
            "30a294f34f034704",
            "7aa43b2cc656c47a",
            "8fb676907e74f479",
            "c763be1fb680f2fa"
        ],
        "x": 14,
        "y": 239,
        "w": 612,
        "h": 262
    },
    {
        "id": "a636e353a3bfe34b",
        "type": "group",
        "z": "84a7a2e619383c7d",
        "name": "Values Retention Policy",
        "style": {
            "label": true,
            "stroke": "#ff0000",
            "fill": "#ffbfbf",
            "fill-opacity": "0.5",
            "label-position": "n",
            "color": "#ff0000"
        },
        "nodes": [
            "002f1d4b98827d2e",
            "4d83152b0ca561f7",
            "dadc371474b5deaa",
            "682ec2eb1cb5d985",
            "684723f72b727075"
        ],
        "x": 14,
        "y": 19,
        "w": 612,
        "h": 202
    },
    {
        "id": "e41151ce57424150",
        "type": "group",
        "z": "03654dd256085b95",
        "name": "Leverage Values Every 10 Seconds",
        "style": {
            "label": true,
            "stroke": "#6f2fa0",
            "label-position": "n",
            "color": "#6f2fa0",
            "fill": "#dbcbe7",
            "fill-opacity": "0.5"
        },
        "nodes": [
            "8c2c5d78fd74baa1",
            "3b8ee2f5eedbf569",
            "94a03746c1112eee",
            "24937513b651c9f6",
            "35997fafedea3624",
            "3e0cb0b291987ee0",
            "24e4444cde79e752",
            "8ce9ee871350eefb",
            "9ce63695655752b1",
            "de99ca6f932f43b1",
            "6bb23ac992f056bd"
        ],
        "x": 34,
        "y": 59,
        "w": 1232,
        "h": 262
    },
    {
        "id": "b9d4a33bb15e970d",
        "type": "group",
        "z": "03654dd256085b95",
        "name": "Leverage Values Every 60 Seconds",
        "style": {
            "stroke": "#6f2fa0",
            "fill": "#dbcbe7",
            "fill-opacity": "0.5",
            "label": true,
            "color": "#6f2fa0",
            "label-position": "n"
        },
        "nodes": [
            "89f1841d1657e545",
            "721da0e7acc6352f",
            "d05c6f96954e5ece",
            "84136f0329e6306b",
            "65210f258cc5c610",
            "ec2b80dc397f9d8f",
            "cd6a8d3daaa8afd9"
        ],
        "x": 34,
        "y": 339,
        "w": 1232,
        "h": 182
    },
    {
        "id": "c087f936f9b1d12c",
        "type": "mqtt-broker",
        "name": "ie-databus",
        "broker": "ie-databus",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "5",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "fcd8b0b7fe626733",
        "type": "ui_base",
        "theme": {
            "name": "theme-light",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
            },
            "themeState": {
                "base-color": {
                    "default": "#0094CE",
                    "value": "#0094CE",
                    "edited": false
                },
                "page-titlebar-backgroundColor": {
                    "value": "#0094CE",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#fafafa",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#1bbfff",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#111111",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#0094ce",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey",
                "palette": "light"
            }
        },
        "site": {
            "name": "Node-RED Dashboard",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "lockMenu": "false",
            "allowTempTheme": "true",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "8904b4b641c67a20",
        "type": "postgreSQLConfig",
        "name": "oee_rt_app4",
        "host": "edge-postgresql",
        "hostFieldType": "str",
        "port": "5432",
        "portFieldType": "num",
        "database": "oee_rt_app4",
        "databaseFieldType": "str",
        "ssl": "false",
        "sslFieldType": "bool",
        "applicationName": "",
        "applicationNameType": "str",
        "max": "10",
        "maxFieldType": "num",
        "idle": "1000",
        "idleFieldType": "num",
        "connectionTimeout": "10000",
        "connectionTimeoutFieldType": "num",
        "user": "gdm",
        "userFieldType": "str",
        "password": "gdmedge0",
        "passwordFieldType": "str"
    },
    {
        "id": "c3edaebc343ed0e7",
        "type": "postgreSQLConfig",
        "name": "oee_rt_app5",
        "host": "edge-postgresql",
        "hostFieldType": "str",
        "port": "5432",
        "portFieldType": "num",
        "database": "oee_rt_app5",
        "databaseFieldType": "str",
        "ssl": "false",
        "sslFieldType": "bool",
        "applicationName": "",
        "applicationNameType": "str",
        "max": "10",
        "maxFieldType": "num",
        "idle": "1000",
        "idleFieldType": "num",
        "connectionTimeout": "10000",
        "connectionTimeoutFieldType": "num",
        "user": "gdm",
        "userFieldType": "str",
        "password": "gdmedge0",
        "passwordFieldType": "str"
    },
    {
        "id": "382604d1845962c0",
        "type": "function",
        "z": "a3aef14032aa8402",
        "name": "Create Token Request",
        "func": "// init msg\nmsg = {\"headers\": {}};\n\n// set method\nmsg.method = \"POST\";\n\n//set url\nmsg.url = flow.get(\"dataserviceWriteUrl\") + \"/TokenManagerService/oauth/token\";\n\n//set body\nmsg.payload = {\n    \"appName\": \"edgeappdataservice\",\n    \"appVersion\": \"1.1\",\n    \"hostTenant\": \"edge\",\n    \"userTenant\": \"edge\"\n    };\n        \n// set headers\nconst strJson = JSON.stringify(msg.payload);\nconst lenJson = Buffer.byteLength(strJson);\nmsg.headers['Content-Type'] = 'application/json';\nmsg.headers['Content-Length'] = lenJson;\n\n// set auth header\nlet authStr = flow.get(\"dataserviceWriteUser\") + \":\" + flow.get(\"dataserviceWritePass\");\nlet basicOut = Buffer.from(authStr).toString('base64');\nmsg.headers['X-SPACE-AUTH-KEY'] = 'Basic ' + basicOut;\n\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 140,
        "wires": [
            [
                "48559fefeda04550"
            ]
        ]
    },
    {
        "id": "48559fefeda04550",
        "type": "http request",
        "z": "a3aef14032aa8402",
        "name": "",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 770,
        "y": 140,
        "wires": [
            [
                "5cd11b6dccc2e5ff"
            ]
        ]
    },
    {
        "id": "b4b5d4c2525bd852",
        "type": "inject",
        "z": "a3aef14032aa8402",
        "name": "At Start",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "date",
        "x": 140,
        "y": 80,
        "wires": [
            [
                "5d070ad37fad5b36"
            ]
        ]
    },
    {
        "id": "5cd11b6dccc2e5ff",
        "type": "change",
        "z": "a3aef14032aa8402",
        "name": "set accessToken",
        "rules": [
            {
                "t": "set",
                "p": "writeAccessToken",
                "pt": "flow",
                "to": "payload.access_token",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 990,
        "y": 140,
        "wires": [
            [
                "f8ba8b820695cc9c"
            ]
        ]
    },
    {
        "id": "f91846b50c3b1252",
        "type": "function",
        "z": "a3aef14032aa8402",
        "name": "Create Data Request",
        "func": "// init msg\nlet outMsg = {\"headers\": {}};\n\n// set method\noutMsg.method = \"POST\";\n\n// set baseRoute\noutMsg.baseRoute = msg.baseRoute;\n//set url\noutMsg.url = msg.baseRoute;\n\n// set token header\noutMsg.headers[\"authorization\"] = flow.get(\"writeAccessToken\");\n\n// MAX NUMBER OF POINTS TO BE SENT WITH ONE REQUEST\nlet maxPoints = 20000;\n\n// init new databuffer\noutMsg.dataBuffer = [];\n// init payload to be written\noutMsg.payload = [];\n\n// copy writestats\noutMsg.writeStats = msg.writeStats;\n\n// get the number of variables remaining to be sent\nlet numVariables = msg.dataBuffer.length;\n// get max points for each variable based on total max points\nlet maxPointsVariable = maxPoints / numVariables;\n\n// for each tag in databuffer\nfor (let i = 0; i < msg.dataBuffer.length; i++)\n{\n    // push write data structure to payload\n    outMsg.payload.push({\n        \"variableId\" : msg.dataBuffer[i].variableId,\n        \"values\": []\n    })\n    // get the act last index of payload\n    let payloadLastIndex = outMsg.payload.length - 1;\n    \n    // check how many points remain to be sent for act variable\n    if(msg.dataBuffer[i].values.length > maxPointsVariable)\n    {\n        // take first N points from databuffer\n        let valsToSend = msg.dataBuffer[i].values.splice(0, maxPointsVariable);\n        // set them to payload\n        outMsg.payload[payloadLastIndex].values = valsToSend;\n        // push the remaining points to new databuffer for next request\n        outMsg.dataBuffer.push(msg.dataBuffer[i]);\n        \n        // update number of points sent\n        outMsg.writeStats.totWritePoints += maxPointsVariable;\n        \n    }\n    else\n    {\n        // push all the points to payload\n        outMsg.payload[payloadLastIndex].values = msg.dataBuffer[i].values;\n        \n        // update number of points sent\n        outMsg.writeStats.totWritePoints += msg.dataBuffer[i].values.length;\n    }\n}\n\nreturn outMsg;\n    \n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 440,
        "wires": [
            [
                "4938c1a4e33ff7c6"
            ]
        ]
    },
    {
        "id": "4938c1a4e33ff7c6",
        "type": "http request",
        "z": "a3aef14032aa8402",
        "name": "",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 850,
        "y": 440,
        "wires": [
            [
                "ce93ae50a5102796"
            ]
        ]
    },
    {
        "id": "a82b71868ba2f65f",
        "type": "function",
        "z": "a3aef14032aa8402",
        "name": "Create Var Request",
        "func": "// init msg\nmsg = {\"headers\": {}};\n\n// set method\nmsg.method = \"GET\";\n\n//set url\nmsg.url = flow.get(\"dataserviceWriteUrl\") + \"/DataService/Variables\";\n\n// set token header\nmsg.headers[\"authorization\"] = flow.get(\"writeAccessToken\");\n\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 260,
        "wires": [
            [
                "15bb6be32c9963c9"
            ]
        ]
    },
    {
        "id": "15bb6be32c9963c9",
        "type": "http request",
        "z": "a3aef14032aa8402",
        "name": "",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 770,
        "y": 260,
        "wires": [
            [
                "64359736a111ec83"
            ]
        ]
    },
    {
        "id": "64359736a111ec83",
        "type": "function",
        "z": "a3aef14032aa8402",
        "name": "Set variablesMap",
        "func": "// create out message\nlet outMsg = {\"payload\": {\n      \"fill\": \"red\",\n      \"shape\": \"dot\",\n      \"text\": \"Connected but no variables found in DataService.\"\n}};\n\n// get the assets map\nlet assetsMap = flow.get(\"writeAssetsMap\");\n\n// init variables Map\nlet variablesMap = {};\n\n// iterate through variables in dataservice\nfor(let i = 0; i < msg.payload.variables.length; i++){\n    // create variable name as assetName.variableName\n    let varName = assetsMap[msg.payload.variables[i].assetId] + \".\" + msg.payload.variables[i].variableName;\n\n    // set variables map as varName : varId\n    variablesMap[varName] = msg.payload.variables[i].variableId;\n}\n\n\nif (Object.keys(variablesMap).length > 0) {\n    flow.set(\"writeVariablesMap\", variablesMap);\n    // set status\n    outMsg.payload = {\n      \"fill\": \"green\",\n      \"shape\": \"dot\",\n      \"text\": \"Connected and Configured for writing, \" + Object.keys(variablesMap).length + \" variables found in DataService.\"\n    };\n}\nelse\n{\n    flow.set(\"writeVariablesMap\", null);\n}\n\n\nreturn outMsg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 990,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "f8ba8b820695cc9c",
        "type": "switch",
        "z": "a3aef14032aa8402",
        "name": "accessToken?",
        "property": "writeAccessToken",
        "propertyType": "flow",
        "rules": [
            {
                "t": "nnull"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 320,
        "y": 200,
        "wires": [
            [
                "5fad6a83956dbdf8"
            ]
        ]
    },
    {
        "id": "6727be51c0f66cdc",
        "type": "switch",
        "z": "a3aef14032aa8402",
        "name": "accessToken?",
        "property": "writeAccessToken",
        "propertyType": "flow",
        "rules": [
            {
                "t": "nnull"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 320,
        "y": 340,
        "wires": [
            [
                "30205e4b6b422d74"
            ]
        ]
    },
    {
        "id": "30205e4b6b422d74",
        "type": "switch",
        "z": "a3aef14032aa8402",
        "name": "variablesMap?",
        "property": "writeVariablesMap",
        "propertyType": "flow",
        "rules": [
            {
                "t": "nnull"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 320,
        "y": 380,
        "wires": [
            [
                "cfaa8e97253ec65e"
            ]
        ]
    },
    {
        "id": "3c40304b2bceb27f",
        "type": "function",
        "z": "a3aef14032aa8402",
        "name": "Create User",
        "func": "// init msg\nmsg = {\"headers\": {}};\n\n// set method\nmsg.method = \"POST\";\n\n//set url\nmsg.url = flow.get(\"dataserviceWriteUrl\") + \"/TokenManagerService/users\";\n\nlet user = flow.get(\"dataserviceWriteUser\");\nlet password = flow.get(\"dataserviceWritePass\");\n\n//set body\nmsg.payload = {\n      userName: user,\n      passWord: password,\n      familyName: \"myFamily\" + user,\n      givenName: user,\n      email: user + \"@myemail.com\",\n      roles: [\n        {\n          application: \"edgeappdataservice\",\n          role: \"admin\"\n        }]};\n        \n// set headers\nconst strJson = JSON.stringify(msg.payload);\nconst lenJson = Buffer.byteLength(strJson);\nmsg.headers['Content-Type'] = 'application/json';\nmsg.headers['Content-Length'] = lenJson;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 80,
        "wires": [
            [
                "bef5a5b4f8f34d18"
            ]
        ]
    },
    {
        "id": "bef5a5b4f8f34d18",
        "type": "http request",
        "z": "a3aef14032aa8402",
        "name": "",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 770,
        "y": 80,
        "wires": [
            [
                "382604d1845962c0",
                "929596b169a6dae7"
            ]
        ]
    },
    {
        "id": "5d070ad37fad5b36",
        "type": "change",
        "z": "a3aef14032aa8402",
        "name": "url, user, pass",
        "rules": [
            {
                "t": "set",
                "p": "dataserviceWriteUrl",
                "pt": "flow",
                "to": "http://edgeappdataservice:4203",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "dataserviceWriteUser",
                "pt": "flow",
                "to": "nodeWriteUser",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "dataserviceWritePass",
                "pt": "flow",
                "to": "nodeWritePass",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 340,
        "y": 80,
        "wires": [
            [
                "3c40304b2bceb27f"
            ]
        ]
    },
    {
        "id": "5fad6a83956dbdf8",
        "type": "function",
        "z": "a3aef14032aa8402",
        "name": "Create Asset Request",
        "func": "// init msg\nmsg = {\"headers\": {}};\n\n// set method\nmsg.method = \"GET\";\n\n//set url\nmsg.url = flow.get(\"dataserviceWriteUrl\") + \"/AssetService/Assets\";\n\n// set token header\nmsg.headers[\"authorization\"] = flow.get(\"writeAccessToken\");\n\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 200,
        "wires": [
            [
                "7b9139507abeb244"
            ]
        ]
    },
    {
        "id": "7b9139507abeb244",
        "type": "http request",
        "z": "a3aef14032aa8402",
        "name": "",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 770,
        "y": 200,
        "wires": [
            [
                "771024ead9669552"
            ]
        ]
    },
    {
        "id": "771024ead9669552",
        "type": "function",
        "z": "a3aef14032aa8402",
        "name": "Set assetsMap",
        "func": "// init assets list\nlet assetsMap = {};\n\nfor(i=0; i < msg.payload.assets.length; i++){\n    // for each asset set a key:value property as id:name\n    assetsMap[msg.payload.assets[i].assetId] = msg.payload.assets[i].name;\n}\n\n// set assets list as flow tag\nflow.set(\"writeAssetsMap\", assetsMap);\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 980,
        "y": 200,
        "wires": [
            [
                "a82b71868ba2f65f"
            ]
        ]
    },
    {
        "id": "cfaa8e97253ec65e",
        "type": "function",
        "z": "a3aef14032aa8402",
        "name": "Init Request",
        "func": "// init variablesNames and Ids\nconst variablesMap = flow.get(\"writeVariablesMap\");\nconst variablesNames = Object.keys(variablesMap);\nconst variablesIds = Object.values(variablesMap);\n\n// init databuffer\nmsg.dataBuffer = [];\n\n// init write stats\nmsg.writeStats = {\n    \"variablesNames\": [],\n    \"variablesIds\": [],\n    \"variablesNum\" : 0,\n    \"totWritePoints\" : 0,\n    \"totPoints\": 0\n};\n\n// substitute varName with varId\nfor (let i = 0; i < msg.payload.length; i++)\n{\n    // search the requested var name in var map\n    let varIndex = variablesNames.indexOf(msg.payload[i].variableName);\n    if(varIndex != -1)\n    {\n        // if found, push variable and values to databuffer\n        msg.dataBuffer.push({\n            \"variableId\": variablesIds[varIndex],\n            \"values\": msg.payload[i].values\n        });\n        \n        // write stats\n        msg.writeStats.variablesNames.push(msg.payload[i].variableName);\n        msg.writeStats.variablesIds.push(variablesIds[varIndex]);\n        msg.writeStats.variablesNum++;\n        msg.writeStats.totPoints += msg.payload[i].values.length;\n    }\n}\n\n// init baseRoute\nmsg.baseRoute = flow.get(\"dataserviceWriteUrl\") + \"/DataService/Data\";\n\n\n\n// if all requested tags are found in variable map\nif (msg.dataBuffer.length == msg.payload.length)\n{\n    flow.set(\"writeStartTime\", new Date().getTime());\n    \n    return [null, msg];\n}\nelse\n{\n    let status = {\"payload\": {\n          \"fill\": \"red\",\n          \"shape\": \"dot\",\n          \"text\": \"Error, some variables name was not found.\"\n    }};\n    \n    // return error message\n    return[status, null];\n}\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 360,
        "wires": [
            [],
            [
                "f91846b50c3b1252"
            ]
        ]
    },
    {
        "id": "ce93ae50a5102796",
        "type": "function",
        "z": "a3aef14032aa8402",
        "name": "Recursive Data Writing",
        "func": "\n\n// check if payload has the success prop\nif (msg.payload.hasOwnProperty(\"success\")) {\n    // and if success is true\n    if (msg.payload.success == true) {\n        \n        if(msg.dataBuffer.length > 0)\n        {\n            // create out for next query\n            let out = {\n                \"baseRoute\": msg.baseRoute,\n                \"dataBuffer\": msg.dataBuffer,\n                \"writeStats\": msg.writeStats\n            };\n        \n            \n            // create status message\n            let status = {\"payload\": {\n              \"fill\": \"green\",\n              \"shape\": \"dot\",\n              \"text\": \"Written \" + msg.writeStats.totWritePoints + \" of \" + msg.writeStats.totPoints + \" values...\"\n            }};\n            \n            return [out, status, null];\n        }\n        else \n        { \n            let numPoints = 0;\n\n            // create final out\n            let out = {\n                \"payload\": true,\n                \"queryTime\": new Date().getTime() - flow.get(\"writeStartTime\"),\n                \"variablesNames\": msg.writeStats.variablesNames,\n                \"variablesIds\": msg.writeStats.variablesIds\n            };\n            // create status message\n            let status = {\"payload\": {\n              \"fill\": \"green\",\n              \"shape\": \"dot\",\n              \"text\": new Date().toISOString() + \n                        \"- Write \" + msg.writeStats.totWritePoints +\n                        \" values for \" + msg.writeStats.variablesNum +\n                        \" variables in \" + out.queryTime/1000 + \"s.\"\n            }};\n        \n            return [null, status, out]\n        }\n    }\n    else\n    {\n        // create out message\n        let out = {\n                \"payload\": false,\n                \"queryTime\": new Date().getTime() - flow.get(\"writeStartTime\"),\n                \"variablesNames\": msg.writeStats.variablesNames,\n                \"variablesIds\": msg.writeStats.variablesIds\n        };\n        // create status message\n        let status = {\"payload\": {\n          \"fill\": \"red\",\n          \"shape\": \"dot\",\n          \"text\": \"Error writing data.\"\n        }};\n        \n        return [null, status, out];        \n    }\n}\nelse\n{\n    // create out message\n    let out = {\n            \"payload\": false,\n            \"queryTime\": new Date().getTime() - flow.get(\"writeStartTime\"),\n            \"variablesNames\": msg.writeStats.variablesNames,\n            \"variablesIds\": msg.writeStats.variablesIds\n    };\n    \n    // create status message\n    let status = {\"payload\": {\n      \"fill\": \"red\",\n      \"shape\": \"dot\",\n      \"text\": \"Error writing data.\"\n    }};\n    \n    return [null, status, out];   \n}",
        "outputs": 3,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 820,
        "y": 520,
        "wires": [
            [
                "f91846b50c3b1252"
            ],
            [],
            []
        ]
    },
    {
        "id": "929596b169a6dae7",
        "type": "debug",
        "z": "a3aef14032aa8402",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 900,
        "y": 340,
        "wires": []
    },
    {
        "id": "abc5035a37790f6e",
        "type": "function",
        "z": "38742bb91ad9d5fc",
        "name": "Create Token Request",
        "func": "// init msg\nmsg = {\"headers\": {}};\n\n// set method\nmsg.method = \"POST\";\n\n//set url\nmsg.url = flow.get(\"dataserviceReadUrl\") + \"/TokenManagerService/oauth/token\";\n\n//set body\nmsg.payload = {\n    \"appName\": \"edgeappdataservice\",\n    \"appVersion\": \"1.1\",\n    \"hostTenant\": \"edge\",\n    \"userTenant\": \"edge\"\n    };\n        \n// set headers\nconst strJson = JSON.stringify(msg.payload);\nconst lenJson = Buffer.byteLength(strJson);\nmsg.headers['Content-Type'] = 'application/json';\nmsg.headers['Content-Length'] = lenJson;\n\n// set auth header\nlet authStr = flow.get(\"dataserviceReadUser\") + \":\" + flow.get(\"dataserviceReadPass\");\nlet basicOut = Buffer.from(authStr).toString('base64');\nmsg.headers['X-SPACE-AUTH-KEY'] = 'Basic ' + basicOut;\n\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 140,
        "wires": [
            [
                "0d3fc59067917e1a"
            ]
        ]
    },
    {
        "id": "0d3fc59067917e1a",
        "type": "http request",
        "z": "38742bb91ad9d5fc",
        "name": "",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 770,
        "y": 140,
        "wires": [
            [
                "df074c753dcd2565"
            ]
        ]
    },
    {
        "id": "8e1c0ad053c512be",
        "type": "inject",
        "z": "38742bb91ad9d5fc",
        "name": "At Start",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "date",
        "x": 140,
        "y": 80,
        "wires": [
            [
                "3af489deced21476"
            ]
        ]
    },
    {
        "id": "df074c753dcd2565",
        "type": "change",
        "z": "38742bb91ad9d5fc",
        "name": "set accessToken",
        "rules": [
            {
                "t": "set",
                "p": "readAccessToken",
                "pt": "flow",
                "to": "payload.access_token",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 990,
        "y": 140,
        "wires": [
            [
                "0bd4c145ad009f30"
            ]
        ]
    },
    {
        "id": "c118ea59aee9d8b1",
        "type": "function",
        "z": "38742bb91ad9d5fc",
        "name": "Create Data Request",
        "func": "// init msg\nlet outMsg = {\"headers\": {}};\n\n// set method\noutMsg.method = \"GET\";\n\n// get parameters for data query\n//from like '2021-10-10T10:00:00.000Z';\n//to like'2021-10-10T11:00:00.000Z';\nconst from = new Date(msg.from);\nconst to = new Date(msg.to);\n\n// set baseRoute\noutMsg.baseRoute = msg.baseRoute;\nlet route = msg.baseRoute + \"&from=\" + from.toISOString();\nroute += \"&to=\"   + to.toISOString();\nroute += \"&order=Ascending\";\n//set url\noutMsg.url = route;\n\n// set token header\noutMsg.headers[\"authorization\"] = flow.get(\"readAccessToken\");\n\n// set variablesmap in message\noutMsg.variablesNames = msg.variablesNames;\noutMsg.variablesIds = msg.variablesIds;\n\nif(msg.dataBuffer == \"\")\n{\n    flow.set(\"readStartTime\", new Date().getTime());\n    outMsg.dataBuffer = {};\n    \n    for(i = 0; i < msg.variablesIds.length; i++){\n        outMsg.dataBuffer[msg.variablesIds[i]]  = []; \n    }\n}\nelse\n{\n    outMsg.dataBuffer = msg.dataBuffer;\n}\n\n\nreturn outMsg;\n    \n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 420,
        "wires": [
            [
                "4cbbd503ba076bf1"
            ]
        ]
    },
    {
        "id": "4cbbd503ba076bf1",
        "type": "http request",
        "z": "38742bb91ad9d5fc",
        "name": "",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 830,
        "y": 420,
        "wires": [
            [
                "1e90d1846fd550eb"
            ]
        ]
    },
    {
        "id": "601fc2a7dd9e12ca",
        "type": "function",
        "z": "38742bb91ad9d5fc",
        "name": "Create Var Request",
        "func": "// init msg\nmsg = {\"headers\": {}};\n\n// set method\nmsg.method = \"GET\";\n\n//set url\nmsg.url = flow.get(\"dataserviceReadUrl\") + \"/DataService/Variables\";\n\n// set token header\nmsg.headers[\"authorization\"] = flow.get(\"readAccessToken\");\n\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 260,
        "wires": [
            [
                "22d89b89cdc156cb"
            ]
        ]
    },
    {
        "id": "22d89b89cdc156cb",
        "type": "http request",
        "z": "38742bb91ad9d5fc",
        "name": "",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 770,
        "y": 260,
        "wires": [
            [
                "fc41b543821343df"
            ]
        ]
    },
    {
        "id": "fc41b543821343df",
        "type": "function",
        "z": "38742bb91ad9d5fc",
        "name": "Set variablesMap",
        "func": "// create out message\nlet outMsg = {\"payload\": {\n      \"fill\": \"red\",\n      \"shape\": \"dot\",\n      \"text\": \"Connected but no variables configured.\"\n}};\n\n// get names of variables in input to be extracted from Data Service app\nlet varName = env.get(\"readVariablesNames\");\nlet varNameArray = varName.split(\",\");\n\n// get the assets map\nlet assetsMap = flow.get(\"readAssetsMap\");\n\n// init variables Map\nlet variablesMap = {};\n\n// iterate through variables in dataservice\nfor(let i = 0; i < msg.payload.variables.length; i++){\n    // create variable name as assetName.variableName\n    let varName = assetsMap[msg.payload.variables[i].assetId] + \".\" + msg.payload.variables[i].variableName;\n\n    // search for varName in input variables\n    if(varNameArray.indexOf(varName) != -1)\n    {\n        // set variables map as varName : varId\n        variablesMap[varName] = msg.payload.variables[i].variableId;\n    }\n}\n\n\nif (Object.keys(variablesMap).length > 0) {\n    flow.set(\"readVariablesMap\", variablesMap);\n    // set status\n    outMsg.payload = {\n      \"fill\": \"green\",\n      \"shape\": \"dot\",\n      \"text\": \"Connected and Configured for reading \" + Object.keys(variablesMap).length + \" variables.\"\n    };\n}\nelse\n{\n    flow.set(\"readVariablesMap\", null);\n}\n\n\nreturn outMsg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 990,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "0bd4c145ad009f30",
        "type": "switch",
        "z": "38742bb91ad9d5fc",
        "name": "accessToken?",
        "property": "readAccessToken",
        "propertyType": "flow",
        "rules": [
            {
                "t": "nnull"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 320,
        "y": 200,
        "wires": [
            [
                "2c94fc857dac2dd2"
            ]
        ]
    },
    {
        "id": "f64d0811e72a5d32",
        "type": "switch",
        "z": "38742bb91ad9d5fc",
        "name": "accessToken?",
        "property": "readAccessToken",
        "propertyType": "flow",
        "rules": [
            {
                "t": "nnull"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 340,
        "y": 340,
        "wires": [
            [
                "f710f89cb930c459"
            ]
        ]
    },
    {
        "id": "f710f89cb930c459",
        "type": "switch",
        "z": "38742bb91ad9d5fc",
        "name": "variablesMap?",
        "property": "readVariablesMap",
        "propertyType": "flow",
        "rules": [
            {
                "t": "nnull"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 340,
        "y": 380,
        "wires": [
            [
                "6989400a31aef7a2"
            ]
        ]
    },
    {
        "id": "ff7e0f820e489bec",
        "type": "function",
        "z": "38742bb91ad9d5fc",
        "name": "Create User",
        "func": "// init msg\nmsg = {\"headers\": {}};\n\n// set method\nmsg.method = \"POST\";\n\n//set url\nmsg.url = flow.get(\"dataserviceReadUrl\") + \"/TokenManagerService/users\";\n\nlet user = flow.get(\"dataserviceReadUser\");\nlet password = flow.get(\"dataserviceReadPass\");\n\n//set body\nmsg.payload = {\n      userName: user,\n      passWord: password,\n      familyName: \"myFamily\" + user,\n      givenName: user,\n      email: user + \"@myemail.com\",\n      roles: [\n        {\n          application: \"edgeappdataservice\",\n          role: \"admin\"\n        }]};\n        \n// set headers\nconst strJson = JSON.stringify(msg.payload);\nconst lenJson = Buffer.byteLength(strJson);\nmsg.headers['Content-Type'] = 'application/json';\nmsg.headers['Content-Length'] = lenJson;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 80,
        "wires": [
            [
                "dde55f9ad647d193"
            ]
        ]
    },
    {
        "id": "dde55f9ad647d193",
        "type": "http request",
        "z": "38742bb91ad9d5fc",
        "name": "",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 770,
        "y": 80,
        "wires": [
            [
                "abc5035a37790f6e"
            ]
        ]
    },
    {
        "id": "6989400a31aef7a2",
        "type": "switch",
        "z": "38742bb91ad9d5fc",
        "name": "dateFromPicked?",
        "property": "from",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nnull"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 330,
        "y": 420,
        "wires": [
            [
                "90de0f1e385ed490"
            ]
        ]
    },
    {
        "id": "90de0f1e385ed490",
        "type": "switch",
        "z": "38742bb91ad9d5fc",
        "name": "dateToPicked?",
        "property": "to",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nnull"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 340,
        "y": 460,
        "wires": [
            [
                "0459b588c752ed44"
            ]
        ]
    },
    {
        "id": "3af489deced21476",
        "type": "change",
        "z": "38742bb91ad9d5fc",
        "name": "url, user, pass",
        "rules": [
            {
                "t": "set",
                "p": "dataserviceReadUrl",
                "pt": "flow",
                "to": "http://edgeappdataservice:4203",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "dataserviceReadUser",
                "pt": "flow",
                "to": "nodeReadUser",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "dataserviceReadPass",
                "pt": "flow",
                "to": "nodeReadPass",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 340,
        "y": 80,
        "wires": [
            [
                "ff7e0f820e489bec"
            ]
        ]
    },
    {
        "id": "2c94fc857dac2dd2",
        "type": "function",
        "z": "38742bb91ad9d5fc",
        "name": "Create Asset Request",
        "func": "// init msg\nmsg = {\"headers\": {}};\n\n// set method\nmsg.method = \"GET\";\n\n//set url\nmsg.url = flow.get(\"dataserviceReadUrl\") + \"/AssetService/Assets\";\n\n// set token header\nmsg.headers[\"authorization\"] = flow.get(\"readAccessToken\");\n\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 200,
        "wires": [
            [
                "963417999d6e9b8e"
            ]
        ]
    },
    {
        "id": "963417999d6e9b8e",
        "type": "http request",
        "z": "38742bb91ad9d5fc",
        "name": "",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 770,
        "y": 200,
        "wires": [
            [
                "b4e5f96e77ed5063"
            ]
        ]
    },
    {
        "id": "b4e5f96e77ed5063",
        "type": "function",
        "z": "38742bb91ad9d5fc",
        "name": "Set assetsMap",
        "func": "// init assets list\nlet assetsMap = {};\n\nfor(i=0; i < msg.payload.assets.length; i++){\n    // for each asset set a key:value property as id:name\n    assetsMap[msg.payload.assets[i].assetId] = msg.payload.assets[i].name;\n}\n\n// set assets list as flow tag\nflow.set(\"readAssetsMap\", assetsMap);\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 980,
        "y": 200,
        "wires": [
            [
                "601fc2a7dd9e12ca"
            ]
        ]
    },
    {
        "id": "0459b588c752ed44",
        "type": "function",
        "z": "38742bb91ad9d5fc",
        "name": "Init Request",
        "func": "\n\n// init variablesNames and Ids\nconst variablesMap = flow.get(\"readVariablesMap\");\nmsg.variablesNames = Object.keys(variablesMap);\nmsg.variablesIds = Object.values(variablesMap);\n\n// init databuffer\nmsg.dataBuffer = \"\";\n\n// init baseRoute\nmsg.baseRoute = flow.get(\"dataserviceReadUrl\") +\n                \"/DataService/Data?variableIds=[\\\"\" \n                + msg.variablesIds.join(\"\\\",\\\"\") + \"\\\"]\";\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 340,
        "wires": [
            [
                "c118ea59aee9d8b1"
            ]
        ]
    },
    {
        "id": "1e90d1846fd550eb",
        "type": "function",
        "z": "38742bb91ad9d5fc",
        "name": "Recursive Data Extraction",
        "func": "\n// loop over data received from dataservice\nfor(i=0; i<msg.payload.data.length; i++){\n    let varData = msg.payload.data[i];\n    // concatenate actual databuffer with new data \n    msg.dataBuffer[varData.variableId] = msg.dataBuffer[varData.variableId].concat(varData.values);\n}\n\n// check if some data are still to be queried\nif (msg.payload.hasOwnProperty(\"hasMoreData\")) {\n    // create out for next query\n    let out = {\n        \"baseRoute\": msg.baseRoute,\n        \"from\": msg.payload.hasMoreData.from,\n        \"to\": msg.payload.hasMoreData.to,\n        \"dataBuffer\": msg.dataBuffer,\n        \"variablesNames\": msg.variablesNames,\n        \"variablesIds\": msg.variablesIds\n    };\n    // create status message\n    let status = {\"payload\": {\n      \"fill\": \"green\",\n      \"shape\": \"dot\",\n      \"text\": \"Querying data in progress...\"\n    }};\n    \n    return [out, status, null];\n    \n}\nelse {\n    // change ids with names before sending databuffer \n    let newDataBuffer = {};\n    let numPoints = 0;\n    for(let i = 0; i < msg.variablesIds.length; i++)\n    {\n        newDataBuffer[msg.variablesNames[i]] = msg.dataBuffer[msg.variablesIds[i]];\n        numPoints += msg.dataBuffer[msg.variablesIds[i]].length\n    }\n    \n    // create final out\n    let out = {\n        \"payload\": newDataBuffer,\n        \"queryTime\": new Date().getTime() - flow.get(\"readStartTime\"),\n        \"variablesNames\": msg.variablesNames,\n        \"variablesIds\": msg.variablesIds\n    };\n    // create status message\n    let status = {\"payload\": {\n      \"fill\": \"green\",\n      \"shape\": \"dot\",\n      \"text\": new Date().toISOString() + \n                \"- Read \" + numPoints +\n                \" values from \" + msg.variablesIds.length +\n                \" variables in \" + out.queryTime/1000 + \"s.\"\n    }};\n\n    return [null, status, out]\n}",
        "outputs": 3,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 520,
        "wires": [
            [
                "c118ea59aee9d8b1"
            ],
            [],
            []
        ]
    },
    {
        "id": "7296752b8e3e19c3",
        "type": "inject",
        "z": "3b7e464203938ea3",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "300",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 250,
        "y": 140,
        "wires": [
            [
                "348e453f7b55407f"
            ]
        ]
    },
    {
        "id": "348e453f7b55407f",
        "type": "http request",
        "z": "3b7e464203938ea3",
        "name": "",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://earthquake.usgs.gov/earthquakes/feed/v1.0/summary/significant_month.csv",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 490,
        "y": 140,
        "wires": [
            [
                "595cb3d6fd557530",
                "35f13ceccaf08218"
            ]
        ]
    },
    {
        "id": "595cb3d6fd557530",
        "type": "csv",
        "z": "3b7e464203938ea3",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "one",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 730,
        "y": 140,
        "wires": [
            [
                "01f30b44051272fe"
            ]
        ]
    },
    {
        "id": "01f30b44051272fe",
        "type": "debug",
        "z": "3b7e464203938ea3",
        "name": "debug 1",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 960,
        "y": 140,
        "wires": []
    },
    {
        "id": "35f13ceccaf08218",
        "type": "switch",
        "z": "3b7e464203938ea3",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "9",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 730,
        "y": 240,
        "wires": [
            [
                "0fe71ebdecbccfbb"
            ]
        ]
    },
    {
        "id": "0fe71ebdecbccfbb",
        "type": "change",
        "z": "3b7e464203938ea3",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "Errore",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 900,
        "y": 320,
        "wires": [
            [
                "eaa90100f769ae85"
            ]
        ]
    },
    {
        "id": "eaa90100f769ae85",
        "type": "debug",
        "z": "3b7e464203938ea3",
        "name": "debug 2",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1200,
        "y": 320,
        "wires": []
    },
    {
        "id": "e36406f2.8ef798",
        "type": "inject",
        "z": "951a64b45b2c724e",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "300",
        "crontab": "",
        "once": false,
        "onceDelay": "",
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 90,
        "y": 60,
        "wires": [
            [
                "c3c50023.3bbed"
            ]
        ]
    },
    {
        "id": "c3c50023.3bbed",
        "type": "http request",
        "z": "951a64b45b2c724e",
        "name": "Recent Quakes",
        "method": "GET",
        "paytoqs": "ignore",
        "url": "https://earthquake.usgs.gov/earthquakes/feed/v1.0/summary/significant_month.csv",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 260,
        "y": 60,
        "wires": [
            [
                "8afc6cac.e0812"
            ]
        ]
    },
    {
        "id": "8afc6cac.e0812",
        "type": "csv",
        "z": "951a64b45b2c724e",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "",
        "multi": "one",
        "ret": "\\n",
        "temp": "",
        "skip": 0,
        "strings": true,
        "include_empty_strings": false,
        "include_null_values": false,
        "x": 430,
        "y": 60,
        "wires": [
            [
                "44779781.4190f8",
                "6f0eb546.9e208c"
            ]
        ]
    },
    {
        "id": "44779781.4190f8",
        "type": "debug",
        "z": "951a64b45b2c724e",
        "name": "",
        "active": true,
        "complete": false,
        "x": 590,
        "y": 60,
        "wires": []
    },
    {
        "id": "6f0eb546.9e208c",
        "type": "switch",
        "z": "951a64b45b2c724e",
        "name": "",
        "property": "payload.mag",
        "propertyType": "msg",
        "rules": [
            {
                "t": "gte",
                "v": "7",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 470,
        "y": 120,
        "wires": [
            [
                "d78d4aa8.8c8208"
            ]
        ]
    },
    {
        "id": "d78d4aa8.8c8208",
        "type": "change",
        "z": "951a64b45b2c724e",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "PANIC!",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 610,
        "y": 180,
        "wires": [
            [
                "72fddece.fac0d"
            ]
        ]
    },
    {
        "id": "72fddece.fac0d",
        "type": "debug",
        "z": "951a64b45b2c724e",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 710,
        "y": 120,
        "wires": []
    },
    {
        "id": "373d123cadccb5b8",
        "type": "inject",
        "z": "20bce6ff5edcf012",
        "name": "Init",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 90,
        "y": 40,
        "wires": [
            [
                "d95f093eea56e413"
            ]
        ]
    },
    {
        "id": "d95f093eea56e413",
        "type": "function",
        "z": "20bce6ff5edcf012",
        "name": "Debugging",
        "func": "// Init out message.\nlet outMsg = { \"payload\": [] };\n\n// Push to out array.\noutMsg.payload.push({\n    //\"debug\": \n});\n\nreturn outMsg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 230,
        "y": 40,
        "wires": [
            [
                "cfb93fd92ce7ad0c"
            ]
        ]
    },
    {
        "id": "cfb93fd92ce7ad0c",
        "type": "debug",
        "z": "20bce6ff5edcf012",
        "name": "Debug",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 370,
        "y": 40,
        "wires": []
    },
    {
        "id": "870fb7a8e43c680d",
        "type": "function",
        "z": "6fbff0445efb9605",
        "g": "30f445478da1a215",
        "name": "Axis Mapping",
        "func": "const axMap = [\n    \"BS_CV\",\n    \"FC_CB\",\n    \"CF_AP\",\n    \"BS_SI\",\n    \"CF_CF\",\n    \"AQ_CU\",\n    \"FT_IF\",\n    \"TIUP_TC\",\n    \"Spare\",\n    \"Spare\",\n    \"FT_CV\",\n    \"BS_TC\",\n    \"TILO_TC\",\n    \"SG_IF2\",\n    \"TS_IF2\",\n    \"FC_WX\",\n    \"PD_IFUP\",\n    \"PD_IFLO\",\n    \"FT_AP\",\n    \"AQ_AV\",\n    \"Spare\",\n    \"AQ_PVM\",\n    \"TI_CU\",\n    \"CF_CD\",\n    \"TI_AV\",\n    \"Spare\",\n    \"AQ_IF\",\n    \"AQ_TC\",\n    \"TC_TC\",\n    \"SG_IF\",\n    \"Spare\",\n    \"Spare\",\n    \"SG_UB\",\n    \"ES_CV\",\n    \"CF_TW\",\n    \"TS_CV\",\n    \"BS_IF\",\n    \"Spare\",\n    \"Spare\",\n    \"Spare\",\n    \"Spare\",\n    \"Spare\",\n    \"Spare\",\n    \"Spare\",\n    \"FW_AP\",\n    \"FW_CU\",\n    \"XC_XC\",\n    \"Spare\",\n    \"FW_CC\",\n    \"FW_TC\",\n    \"FW_IF\",\n    \"FW_CV\",\n    \"Spare\",\n    \"Spare\",\n    \"RW_TW\",\n    \"TA_CC\",\n    \"TA_IFOP\",\n    \"TA_IFDR\",\n    \"TA_IF\",\n    \"SP_TC\",\n    \"RW_AP\",\n    \"RW_CVCC\",\n    \"FW_IFDR\",\n    \"FW_IFOP\",\n    \"Spare\",\n    \"Spare\",\n    \"ES_SB\",\n    \"TA_CVFO\",\n    \"XF_XF\",\n    \"BS_CV2\",\n    \"TXT_TC\",\n    \"BS_LM\",\n    \"TA_CV\",\n    \"TS_IF\",\n    \"SP_CV\",\n    \"SG_TC\",\n    \"RW_CC\",\n    \"TA_EB\",\n    \"LF_CV\",\n    \"CF_CD2\",\n    \"Spare\",\n    \"Spare\",\n    \"TA_AP\",\n    \"SG_TB\",\n    \"XF_CVIN\",\n    \"TS_AW\",\n    \"Spare\",\n    \"Spare\",\n    \"Spare\",\n    \"Spare\",\n    \"Spare\",\n    \"Spare\",\n    \"Spare\",\n    \"Spare\",\n    \"Spare\",\n    \"Spare\",\n    \"Spare\",\n    \"Spare\",\n    \"Spare\",\n    \"Spare\",\n    \"Spare\",\n    \"Spare\",\n    \"Spare\",\n    \"Spare\",\n    \"Spare\",\n    \"Spare\",\n    \"Spare\",\n    \"Spare\",\n    \"Spare\",\n    \"Spare\",\n    \"Spare\",\n    \"Spare\",\n    \"Spare\",\n    \"Spare\",\n    \"Spare\",\n    \"Spare\",\n    \"Spare\",\n    \"Spare\",\n    \"Spare\",\n    \"Spare\",\n    \"Spare\",\n    \"Spare\",\n    \"Spare\",\n    \"Spare\",\n    \"Spare\",\n    \"Spare\",\n    \"Spare\",\n    \"Spare\",\n    \"Spare\",\n    \"Spare\",\n    \"Spare\",\n    \"Spare\",\n    \"Spare\",\n    \"Spare\",\n    \"Spare\",\n    \"Spare\",\n    \"Spare\",\n    \"Spare\",\n    \"Spare\",\n    \"Spare\",\n    \"Spare\",\n    \"Spare\",\n    \"Spare\",\n    \"Spare\",\n    \"Spare\",\n    \"Spare\",\n    \"Spare\",\n    \"Spare\",\n    \"Spare\",\n    \"Spare\",\n    \"Spare\",\n    \"Spare\",\n    \"Spare\",\n    \"Spare\",\n    \"Spare\",\n    \"Spare\",\n    \"Spare\",\n    \"Spare\",\n    \"Spare\",\n    \"Spare\",\n    \"Spare\",\n    \"Spare\",\n    \"Spare\",\n    \"Spare\",\n    \"Spare\",\n    \"Spare\",\n    \"Spare\",\n    \"Spare\",\n    \"Spare\",\n    \"Spare\",\n    \"Spare\",\n    \"Spare\",\n    \"Spare\",\n    \"Spare\",\n    \"Spare\",\n    \"Spare\",\n    \"Spare\",\n    \"Spare\",\n    \"Spare\",\n    \"Spare\",\n    \"Spare\",\n    \"Spare\",\n    \"Spare\",\n    \"Spare\",\n    \"Spare\",\n    \"Spare\",\n    \"Spare\",\n    \"Spare\",\n    \"Spare\",\n    \"Spare\",\n    \"Spare\",\n    \"Spare\",\n    \"Spare\",\n    \"Spare\",\n    \"Spare\",\n    \"Spare\",\n    \"Spare\",\n    \"Spare\",\n    \"Spare\",\n    \"Spare\",\n    \"Spare\",\n    \"Spare\",\n    \"Spare\",\n    \"Spare\",\n    \"Spare\",\n    \"Spare\",\n    \"Spare\",\n    \"Spare\",\n    \"Spare\",\n    \"Spare\",\n    \"Spare\",\n    \"Spare\",\n    \"Spare\",\n    \"Spare\",\n    \"Spare\",\n    \"Spare\",\n    \"Spare\",\n    \"Spare\",\n    \"Spare\",\n    \"Spare\",\n    \"Spare\",\n    \"Spare\",\n    \"Spare\",\n    \"Spare\",\n    \"Spare\",\n    \"Spare\",\n    \"Spare\",\n    \"Spare\",\n    \"Spare\",\n    \"Spare\",\n    \"Spare\",\n    \"Spare\",\n    \"Spare\",\n    \"Spare\",\n    \"Spare\",\n    \"Spare\",\n    \"Spare\",\n    \"Spare\",\n    \"Spare\",\n    \"Spare\",\n    \"Spare\",\n    \"Spare\",\n    \"Spare\",\n    \"Spare\",\n    \"Spare\",\n    \"Spare\",\n    \"Spare\",\n    \"Spare\",\n    \"Spare\",\n    \"Spare\",\n    \"Spare\",\n    \"Spare\",\n    \"Spare\",\n    \"Spare\",\n    \"Spare\",\n    \"Spare\"\n];\n\nglobal.set(\"axId\", 1072, \"file\");\nglobal.set(\"axMap\", axMap, \"file\");\n\nnode.status({\n    fill: \"green\",\n    shape: \"dot\",\n    text: \"Axis  mapped.\"\n});\n\n// Init out messages.\nlet map = { \"payload\": [] };\nlet params = { \"payload\": [] };\n\n// Map\nmap.payload.push({\n    \"file\": global.get(\"axMap\", \"file\")\n});\n\n// SQL Query Parameters\nmsg.params = [\n    \"{\" + global.get(\"axId\", \"file\") + \"}\",\n    \"{\" + axMap.join() + \"}\"\n]\n\nreturn [map, msg];",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 240,
        "wires": [
            [
                "903764ec8de30761"
            ],
            []
        ]
    },
    {
        "id": "76d7aee2d336c57e",
        "type": "inject",
        "z": "6fbff0445efb9605",
        "name": "Init",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "v": "",
                "vt": "num"
            }
        ],
        "repeat": "3600",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 90,
        "y": 60,
        "wires": [
            [
                "870fb7a8e43c680d",
                "570f3127e529ded3",
                "93dda6cd4eec0411",
                "574dcc882d63edd9",
                "4369396003d89155",
                "669494497bf7927c",
                "09cf7f311fa6913f",
                "abbd7ddda43222e3",
                "9ae8a7d7ec563abe",
                "2b95dd054c1b9c65",
                "1212e8146abc9193"
            ]
        ]
    },
    {
        "id": "903764ec8de30761",
        "type": "debug",
        "z": "6fbff0445efb9605",
        "g": "30f445478da1a215",
        "name": "Axis Map",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 560,
        "y": 220,
        "wires": []
    },
    {
        "id": "570f3127e529ded3",
        "type": "function",
        "z": "6fbff0445efb9605",
        "g": "30f445478da1a215",
        "name": "AC Motors Mapping",
        "func": "const acmMap = [\n    \"CF_BW\",\n    \"CF_BWVF\",\n    \"CF_CF\",\n    \"PD_MI\",\n    \"PD_PF\",\n    \"SG_SL\"\n];\n\nglobal.set(\"acmId\", 1021, \"file\");\nglobal.set(\"acmMap\", acmMap, \"file\");\n\nnode.status({\n    fill: \"green\",\n    shape: \"dot\",\n    text: \"AC Motors mapped.\"\n});\n\n// Init out messages.\nlet map = { \"payload\": [] };\nlet params = { \"payload\": [] };\n\n// Map\nmap.payload.push({\n    \"file\": global.get(\"acmMap\", \"file\")\n});\n\n// SQL Query Parameters\nmsg.params = [\n    \"{\" + global.get(\"acmId\", \"file\") + \"}\",\n    \"{\" + acmMap.join() + \"}\"\n]\n\nreturn [map, msg];",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 180,
        "wires": [
            [
                "ab61c0ca8d72bfb7"
            ],
            []
        ]
    },
    {
        "id": "ab61c0ca8d72bfb7",
        "type": "debug",
        "z": "6fbff0445efb9605",
        "g": "30f445478da1a215",
        "name": "AC Motors Map",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 580,
        "y": 160,
        "wires": []
    },
    {
        "id": "93dda6cd4eec0411",
        "type": "function",
        "z": "6fbff0445efb9605",
        "g": "30f445478da1a215",
        "name": "Elastic Unwinders Mapping",
        "func": "const euwMap = [\n    \"LG_1\",\n    \"LG_2\",\n    \"LG_3\",\n    \"LG_4\",\n    \"LG_5\",\n    \"LG_6\",\n    \"TE_1\",\n    \"TE_2\",\n    \"TE_3\",\n    \"TE_4\"\n];\n\nglobal.set(\"euwId\", 1033, \"file\");\nglobal.set(\"euwap\", euwMap, \"file\");\n\nnode.status({\n    fill: \"green\",\n    shape: \"dot\",\n    text: \"Elastic Unwinders mapped.\"\n});\n\n// Init out messages.\nlet map = { \"payload\": [] };\nlet params = { \"payload\": [] };\n\n// Map\nmap.payload.push({\n    \"file\": global.get(\"euwMap\", \"file\")\n});\n\n// SQL Query Parameters\nmsg.params = [\n    \"{\" + global.get(\"euwId\", \"file\") + \"}\",\n    \"{\" + euwMap.join() + \"}\"\n]\n\nreturn [map, msg];",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 300,
        "wires": [
            [
                "108accbc562305e2"
            ],
            []
        ]
    },
    {
        "id": "108accbc562305e2",
        "type": "debug",
        "z": "6fbff0445efb9605",
        "g": "30f445478da1a215",
        "name": "Elastic Unwinders Map",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 600,
        "y": 280,
        "wires": []
    },
    {
        "id": "574dcc882d63edd9",
        "type": "function",
        "z": "6fbff0445efb9605",
        "g": "30f445478da1a215",
        "name": "Thermobonders Mapping",
        "func": "const tbMap = [\n    \"SG\",\n    \"TA\"\n];\n\nglobal.set(\"tbId\", 1101, \"file\");\nglobal.set(\"tbMap\", tbMap, \"file\");\n\nnode.status({\n    fill: \"green\",\n    shape: \"dot\",\n    text: \"Thermobonders mapped.\"\n});\n\n// Init out messages.\nlet map = { \"payload\": [] };\nlet params = { \"payload\": [] };\n\n// Map\nmap.payload.push({\n    \"file\": global.get(\"tbMap\", \"file\")\n});\n\n// SQL Query Parameters\nmsg.params = [\n    \"{\" + global.get(\"tbId\", \"file\") + \"}\",\n    \"{\" + tbMap.join() + \"}\"\n]\n\nreturn [map, msg];",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 480,
        "wires": [
            [
                "57b88f4783604412"
            ],
            []
        ]
    },
    {
        "id": "57b88f4783604412",
        "type": "debug",
        "z": "6fbff0445efb9605",
        "g": "30f445478da1a215",
        "name": "Thermobonders Map",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 600,
        "y": 460,
        "wires": []
    },
    {
        "id": "4369396003d89155",
        "type": "function",
        "z": "6fbff0445efb9605",
        "g": "30f445478da1a215",
        "name": "Unit Mapping",
        "func": "const unMap = [\n    \"UN\"\n];\n\nglobal.set(\"unId\", 1, \"file\");\nglobal.set(\"unMap\", unMap, \"file\");\n\nnode.status({\n    fill: \"green\",\n    shape: \"dot\",\n    text: \"Unit mapped.\"\n});\n\n// Init out messages.\nlet map = { \"payload\": [] };\nlet params = { \"payload\": [] };\n\n// Map\nmap.payload.push({\n    \"file\": global.get(\"unMap\", \"file\")\n});\n\n// SQL Query Parameters\nmsg.params = [\n    \"{\" + global.get(\"unId\", \"file\") + \"}\",\n    \"{\" + unMap.join() + \"}\"\n]\n\nreturn [map, msg];",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 540,
        "wires": [
            [
                "121ceb9e1829fa99"
            ],
            []
        ]
    },
    {
        "id": "121ceb9e1829fa99",
        "type": "debug",
        "z": "6fbff0445efb9605",
        "g": "30f445478da1a215",
        "name": "Unit Map",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 560,
        "y": 520,
        "wires": []
    },
    {
        "id": "669494497bf7927c",
        "type": "function",
        "z": "6fbff0445efb9605",
        "g": "30f445478da1a215",
        "name": "Mills Mapping",
        "func": "const miMap = [\n    \"MI\"\n];\n\nglobal.set(\"miId\", 1091, \"file\");\nglobal.set(\"miMap\", miMap, \"file\");\n\nnode.status({\n    fill: \"green\",\n    shape: \"dot\",\n    text: \"Mills mapped.\"\n});\n\n// Init out messages.\nlet map = { \"payload\": [] };\nlet params = { \"payload\": [] };\n\n// Map\nmap.payload.push({\n    \"file\": global.get(\"miMap\", \"file\")\n});\n\n// SQL Query Parameters\nmsg.params = [\n    \"{\" + global.get(\"miId\", \"file\") + \"}\",\n    \"{\" + miMap.join() + \"}\"\n]\n\nreturn [map, msg];",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 360,
        "wires": [
            [
                "5608d68176137bce"
            ],
            []
        ]
    },
    {
        "id": "5608d68176137bce",
        "type": "debug",
        "z": "6fbff0445efb9605",
        "g": "30f445478da1a215",
        "name": "Mill Map",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 560,
        "y": 340,
        "wires": []
    },
    {
        "id": "09cf7f311fa6913f",
        "type": "function",
        "z": "6fbff0445efb9605",
        "g": "30f445478da1a215",
        "name": "SAP Mapping",
        "func": "const sapMap = [\n    \"SAPD\",\n    \"SAPL\"\n];\n\nglobal.set(\"sapId\", [1111, 1112], \"file\");\nglobal.set(\"sapMap\", sapMap, \"file\");\n\nnode.status({\n    fill: \"green\",\n    shape: \"dot\",\n    text: \"SAP mapped.\"\n});\n\n// Init out messages.\nlet map = { \"payload\": [] };\nlet params = { \"payload\": [] };\n\n// Map\nmap.payload.push({\n    \"file\": global.get(\"sapMap\", \"file\")\n});\n\n// SQL Query Parameters\nmsg.params = [\n    \"{\" + global.get(\"sapId\", \"file\").join() + \"}\",\n    \"{\" + sapMap.join() + \"}\"\n]\n\nreturn [map, msg];",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 420,
        "wires": [
            [
                "20bf811fdeb817a8"
            ],
            []
        ]
    },
    {
        "id": "20bf811fdeb817a8",
        "type": "debug",
        "z": "6fbff0445efb9605",
        "g": "30f445478da1a215",
        "name": "SAP Map",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 560,
        "y": 400,
        "wires": []
    },
    {
        "id": "abbd7ddda43222e3",
        "type": "function",
        "z": "6fbff0445efb9605",
        "g": "30f445478da1a215",
        "name": "Unwinders Mapping",
        "func": "const uwMap = [\n    \"Spare\",\n    \"BS\",\n    \"FT\",\n    \"FW\",\n    \"TA\",\n    \"SP\",\n    \"AQ\",\n    \"TC\",\n    \"TXT\",\n    \"SG\",\n    \"TILO\",\n    \"TIUP\",\n    \"Spare\",\n    \"Spare\",\n    \"Spare\",\n    \"Spare\",\n    \"Spare\"\n];\n\nglobal.set(\"uwId\", 1031, \"file\");\nglobal.set(\"uwMap\", uwMap, \"file\");\n\nnode.status({\n    fill: \"green\",\n    shape: \"dot\",\n    text: \"Unwinders mapped.\"\n});\n\n// Init out messages.\nlet map = { \"payload\": [] };\nlet params = { \"payload\": [] };\n\n// Map\nmap.payload.push({\n    \"file\": global.get(\"uwMap\", \"file\")\n});\n\n// SQL Query Parameters\nmsg.params = [\n    \"{\" + global.get(\"uwId\", \"file\") + \"}\",\n    \"{\" + uwMap.join() + \"}\"\n]\n\nreturn [map, msg];",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 600,
        "wires": [
            [
                "b72f9aaea67edec8"
            ],
            []
        ]
    },
    {
        "id": "b72f9aaea67edec8",
        "type": "debug",
        "z": "6fbff0445efb9605",
        "g": "30f445478da1a215",
        "name": "Unwinders Map",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 580,
        "y": 580,
        "wires": []
    },
    {
        "id": "d7143c56bc3701ee",
        "type": "function",
        "z": "6fbff0445efb9605",
        "g": "2a888de502a80571",
        "name": "Variables Mapping",
        "func": "// Missing variables aren't available at this moment (e.g.: G120 parameters).\nconst opcuaVarMap = [\n    \"\", // Actual_Current_Value (G120)\n    \"AC_Motor_Inverter_Actual_Speed\",\n    \"\", // Motor_Temperature (G120)\n    \"AC_Motor_Speed_Setpoint\",\n    \"AX_Torque_Utilization\",\n    \"AX_Deviation\",\n    \"AX_Gear\",\n    \"AX_Phase\",\n    \"AX_Phase\",\n    \"AX_Dancer_Position\",\n    \"\", // Axis_Motor_Speed [deg/s]\n    \"AX_Motor_Speed\", // [rpm]\n    \"AX_Temperature\",\n    \"EUW_Actual_DF_Speed\",\n    \"EUW_Actual_DF_Tension\",\n    \"EUW_Actual_TMS_Tension\",\n    \"EUW_Tension_Tolerance\",\n    \"Mill_Rotor_Temp_DR\",\n    \"Mill_Rotor_Temp_OP\",\n    \"Mill_Shaft_Temp_DR\",\n    \"Mill_Shaft_Temp_OP\",\n    \"SAP_Actual_Weight\",\n    \"SAP_Req_Quantity\",\n    \"THB_Up_Roll_Temp_Setpoint\",\n    \"THB_Up_Roll_Temp_Feedback\",\n    \"THB_Low_Roll_Temp_Setpoint\",\n    \"THB_Low_Roll_Temp_Feedback\",\n    \"THB_State\",\n    \"THB_Activate\",\n    \"THB_Up_Roll_Resistor_Activate\",\n    \"THB_Low_Roll_Resistor_Activate\",\n    \"PerforMATE_PML_State\",\n    \"Performate_PML_Mode\",\n    \"Performate_PML_Stacker_State\",\n    \"Performate_PML_Stacker_Mode\",\n    \"Performate_PML_Actual_Speed\",\n    \"Performate_PML_Max_Speed\",\n    \"\", // Converting Recipe\n    \"\", // S&B Recipe\n    \"UW_Actual_Diam\",\n    \"UW_Buffer_Position\",\n    \"UW_Filling\",\n    \"UW_Left_Motor_Temp\",\n    \"UW_Right_Motor_Temp\",\n    \"UW_Splice_Done\",\n    \"WH_First_Waste\",\n    \"WH_Total_Waste\"\n];\n\n// Matching variables from the DB table with the ones in the OPC UA Connector configuration file.\nconst params = msg.payload.map(((obj, j) => ({ \n    ...obj,\n    opcuaName: opcuaVarMap[j]\n})));\n\nglobal.set(\"cmUDTVars\", params, \"file\");\n\nnode.status({\n    fill: \"green\",\n    shape: \"dot\",\n    text: \"Control Modules UDT variables mapped.\"\n});\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 760,
        "wires": [
            [
                "f81f1285669d068d"
            ]
        ]
    },
    {
        "id": "9ae8a7d7ec563abe",
        "type": "function",
        "z": "6fbff0445efb9605",
        "g": "d9c15fa3808c3bc1",
        "name": "Constants Mapping",
        "func": "global.set(\"epsPlc\", 10, \"file\");\nglobal.set(\"epsSimotion\", 10, \"file\");\nglobal.set(\"queueTol\", 10, \"file\");\n\nnode.status({\n    fill: \"green\",\n    shape: \"dot\",\n    text: \"Constants mapped.\"\n});\n\n// Init out message.\nlet outMsg = { \"payload\": [] };\n\n// Push to out array.\noutMsg.payload.push({\n    \"eps\": global.get(\"eps\", \"file\"),\n    \"queueTol\": global.get(\"queueTol\", \"file\")\n});\n\nreturn outMsg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 60,
        "wires": [
            [
                "8b08e82dab297356"
            ]
        ]
    },
    {
        "id": "8b08e82dab297356",
        "type": "debug",
        "z": "6fbff0445efb9605",
        "g": "d9c15fa3808c3bc1",
        "name": "Constants Map",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 580,
        "y": 60,
        "wires": []
    },
    {
        "id": "b8438f3a712d4434",
        "type": "debug",
        "z": "6fbff0445efb9605",
        "g": "30f445478da1a215",
        "name": "Query Output",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1260,
        "y": 380,
        "wires": []
    },
    {
        "id": "4174d43ce63ab89b",
        "type": "function",
        "z": "6fbff0445efb9605",
        "g": "30f445478da1a215",
        "name": "Control Modules Datasets Mapping",
        "func": "if (msg.payload.length > 0) {\n    switch (msg.payload[0].cm_type_id) {\n        case global.get(\"acmId\", \"file\"): {\n            global.set(\"acm\", msg.payload, \"file\");\n            break;\n        }\n        \n        case global.get(\"axId\", \"file\"): {\n            global.set(\"ax\", msg.payload, \"file\");\n            break;\n        }\n\n        case global.get(\"euwId\", \"file\"): {\n            global.set(\"euw\", msg.payload, \"file\");\n            break;\n        }\n\n        case global.get(\"miId\", \"file\"): {\n            global.set(\"mi\", msg.payload, \"file\");\n            break;\n        }\n\n        case global.get(\"sapId\", \"file\")[0]:\n        case global.get(\"sapId\", \"file\")[1]: {\n            global.set(\"sap\", msg.payload, \"file\");\n            break;\n        }\n\n        case global.get(\"tbId\", \"file\"): {\n            global.set(\"tb\", msg.payload, \"file\");\n            break;\n        }\n        \n        case global.get(\"unId\", \"file\"): {\n            global.set(\"un\", msg.payload, \"file\");\n            break;\n        }\n\n        case global.get(\"uwId\", \"file\"): {\n            global.set(\"uw\", msg.payload, \"file\");\n            break;\n        }\n\n        case global.get(\"whId\", \"file\"): {\n            global.set(\"wh\", msg.payload, \"file\");\n            break;\n        }\n\n        default: {\n            break;\n        }\n\n    }\n}\n\nnode.status({\n    fill: \"green\",\n    shape: \"dot\",\n    text: \"Control Modules datasets mapped.\"\n});\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1020,
        "y": 380,
        "wires": [
            [
                "b8438f3a712d4434"
            ]
        ]
    },
    {
        "id": "2b95dd054c1b9c65",
        "type": "function",
        "z": "6fbff0445efb9605",
        "g": "30f445478da1a215",
        "name": "Waste Handling Mapping",
        "func": "const whMap = [\n    \"Waste_Code0\",\n    \"Waste_OnStartup\",\n    \"Waste_OnStopping\",\n    \"Waste_Manual\",\n    \"Waste_OnPhasing\",\n    \"Waste_Code5\",\n    \"Waste_Code6\",\n    \"Waste_Code7\",\n    \"Waste_FT_IF_NotSyncro\",\n    \"Waste_BS_IF_NotSyncro\",\n    \"Waste_ProductTest\",\n    \"Waste_Code11\",\n    \"Waste_Code12\",\n    \"Waste_Code13\",\n    \"AQ_MaterialSpliceOp\",\n    \"AQ_MaterialSpliceDr\",\n    \"BS_MaterialSplice\",\n    \"TL_MaterialSplice\",\n    \"FW_MaterialSpliceOp\",\n    \"FW_MaterialSpliceDr\",\n    \"TILO_MaterialSplice\",\n    \"TIUP_MaterialSplice\",\n    \"TA_MaterialSpliceOp\",\n    \"TA_MaterialSpliceDr\",\n    \"SP_MaterialSpliceOp\",\n    \"SP_MaterialSpliceDr\",\n    \"TXT_MaterialSplice\",\n    \"TC_MaterialSplice\",\n    \"SG_MaterialSplice\",\n    \"Waste_Code29\",\n    \"GlueMissing_1_1\",\n    \"GlueMissing_1_2\",\n    \"GlueMissing_1_3\",\n    \"GlueMissing_1_4\",\n    \"GlueMissing_2_1\",\n    \"GlueMissing_2_2\",\n    \"GlueMissing_2_3\",\n    \"GlueMissing_2_4\",\n    \"GlueMissing_3_1\",\n    \"GlueMissing_3_2\",\n    \"GlueMissing_3_3\",\n    \"GlueMissing_3_4\",\n    \"GlueMissing_4_1\",\n    \"GlueMissing_4_2\",\n    \"GlueMissing_4_3\",\n    \"GlueMissing_4_4\",\n    \"GlueMissing_5_1\",\n    \"GlueMissing_5_2\",\n    \"GlueMissing_5_3\",\n    \"GlueMissing_5_4\",\n    \"GlueMissing_6_1\",\n    \"GlueMissing_6_2\",\n    \"GlueMissing_6_3\",\n    \"GlueMissing_6_4\",\n    \"GlueMissing_7_1\",\n    \"GlueMissing_7_2\",\n    \"GlueMissing_7_5\",\n    \"GlueMissing_7_6\",\n    \"GlueMissing_8_1\",\n    \"GlueMissing_8_2\",\n    \"GlueMissing_8_3\",\n    \"GlueMissing_8_4\",\n    \"GlueMissing_9_1\",\n    \"GlueMissing_9_2\",\n    \"GlueMissing_9_3\",\n    \"GlueMissing_9_4\",\n    \"TS_EdgeFault\",\n    \"BS_EdgeFault\",\n    \"SGUB_BadWeld\",\n    \"SGTB_BadWeld\",\n    \"TATB_BadWeld\",\n    \"Waste_Code71\",\n    \"Waste_Code72\",\n    \"Waste_Code73\",\n    \"Waste_Code74\",\n    \"Waste_Code75\",\n    \"Waste_Code76\",\n    \"Waste_Code77\",\n    \"SAP_Missing\",\n    \"SAP_OutOfTollerance\",\n    \"VS_CAMERA_1_Code_1\",\n    \"VS_CAMERA_1_Code_2\",\n    \"VS_CAMERA_1_Code_3\",\n    \"VS_CAMERA_1_Code_4\",\n    \"VS_CAMERA_1_Code_5\",\n    \"VS_CAMERA_1_Code_6\",\n    \"VS_CAMERA_1_Code_7\",\n    \"VS_CAMERA_1_Code_8\",\n    \"VS_CAMERA_1_Code_9\",\n    \"VS_CAMERA_1_Code_10\",\n    \"VS_CAMERA_1_Code_11\",\n    \"VS_CAMERA_1_Code_12\",\n    \"VS_CAMERA_1_Code_13\",\n    \"VS_CAMERA_1_Code_14\",\n    \"VS_CAMERA_1_Code_15\",\n    \"VS_CAMERA_1_Code_16\",\n    \"VS_CAMERA_2_Code_1\",\n    \"VS_CAMERA_2_Code_2\",\n    \"VS_CAMERA_2_Code_3\",\n    \"VS_CAMERA_2_Code_4\",\n    \"VS_CAMERA_2_Code_5\",\n    \"VS_CAMERA_2_Code_6\",\n    \"VS_CAMERA_2_Code_7\",\n    \"VS_CAMERA_2_Code_8\",\n    \"VS_CAMERA_2_Code_9\",\n    \"VS_CAMERA_2_Code_10\",\n    \"VS_CAMERA_2_Code_11\",\n    \"VS_CAMERA_2_Code_12\",\n    \"VS_CAMERA_2_Code_13\",\n    \"VS_CAMERA_2_Code_14\",\n    \"VS_CAMERA_2_Code_15\",\n    \"VS_CAMERA_2_Code_16\",\n    \"VS_CAMERA_3_Code_1\",\n    \"VS_CAMERA_3_Code_2\",\n    \"VS_CAMERA_3_Code_3\",\n    \"VS_CAMERA_3_Code_4\",\n    \"VS_CAMERA_3_Code_5\",\n    \"VS_CAMERA_3_Code_6\",\n    \"VS_CAMERA_3_Code_7\",\n    \"VS_CAMERA_3_Code_8\",\n    \"VS_CAMERA_3_Code_9\",\n    \"VS_CAMERA_3_Code_10\",\n    \"VS_CAMERA_3_Code_11\",\n    \"VS_CAMERA_3_Code_12\",\n    \"VS_CAMERA_3_Code_13\",\n    \"VS_CAMERA_3_Code_14\",\n    \"VS_CAMERA_3_Code_15\",\n    \"VS_CAMERA_3_Code_16\",\n    \"VS_CAMERA_4_Code_1\",\n    \"VS_CAMERA_4_Code_2\",\n    \"VS_CAMERA_4_Code_3\",\n    \"VS_CAMERA_4_Code_4\",\n    \"VS_CAMERA_4_Code_5\",\n    \"VS_CAMERA_4_Code_6\",\n    \"VS_CAMERA_4_Code_7\",\n    \"VS_CAMERA_4_Code_8\",\n    \"VS_CAMERA_4_Code_9\",\n    \"VS_CAMERA_4_Code_10\",\n    \"VS_CAMERA_4_Code_11\",\n    \"VS_CAMERA_4_Code_12\",\n    \"VS_CAMERA_4_Code_13\",\n    \"VS_CAMERA_4_Code_14\",\n    \"VS_CAMERA_4_Code_15\",\n    \"VS_CAMERA_4_Code_16\",\n    \"VS_CAMERA_5_Code_1\",\n    \"VS_CAMERA_5_Code_2\",\n    \"VS_CAMERA_5_Code_3\",\n    \"VS_CAMERA_5_Code_4\",\n    \"VS_CAMERA_5_Code_5\",\n    \"VS_CAMERA_5_Code_6\",\n    \"VS_CAMERA_5_Code_7\",\n    \"VS_CAMERA_5_Code_8\",\n    \"VS_CAMERA_5_Code_9\",\n    \"VS_CAMERA_5_Code_10\",\n    \"VS_CAMERA_5_Code_11\",\n    \"VS_CAMERA_5_Code_12\",\n    \"VS_CAMERA_5_Code_13\",\n    \"VS_CAMERA_5_Code_14\",\n    \"VS_CAMERA_5_Code_15\",\n    \"VS_CAMERA_5_Code_16\",\n    \"VS_CAMERA_6_Code_1\",\n    \"VS_CAMERA_6_Code_2\",\n    \"VS_CAMERA_6_Code_3\",\n    \"VS_CAMERA_6_Code_4\",\n    \"VS_CAMERA_6_Code_5\",\n    \"VS_CAMERA_6_Code_6\",\n    \"VS_CAMERA_6_Code_7\",\n    \"VS_CAMERA_6_Code_8\",\n    \"VS_CAMERA_6_Code_9\",\n    \"VS_CAMERA_6_Code_10\",\n    \"VS_CAMERA_6_Code_11\",\n    \"VS_CAMERA_6_Code_12\",\n    \"VS_CAMERA_6_Code_13\",\n    \"VS_CAMERA_6_Code_14\",\n    \"VS_CAMERA_6_Code_15\",\n    \"VS_CAMERA_6_Code_16\",\n    \"Waste_Code176\",\n    \"Waste_Code177\",\n    \"Waste_Code178\",\n    \"Waste_Code179\",\n    \"Waste_Code180\",\n    \"Waste_Code181\",\n    \"Waste_Code182\",\n    \"Waste_Code183\",\n    \"Waste_Code184\",\n    \"Waste_Code185\",\n    \"Waste_Code186\",\n    \"Waste_Code187\",\n    \"Waste_Code188\",\n    \"Waste_Code189\",\n    \"Waste_Code190\",\n    \"Waste_Code191\",\n    \"Waste_Code192\",\n    \"Waste_Code193\",\n    \"Waste_Code194\",\n    \"Waste_Code195\",\n    \"Waste_Code196\",\n    \"Waste_Code197\",\n    \"Waste_Code198\",\n    \"Waste_Code199\",\n    \"Waste_Code200\",\n    \"Waste_Code201\",\n    \"Waste_Code202\",\n    \"Waste_Code203\",\n    \"Waste_Code204\",\n    \"Waste_Code205\",\n    \"Waste_Code206\",\n    \"Waste_Code207\",\n    \"Waste_Code208\",\n    \"Waste_Code209\",\n    \"Waste_Code210\",\n    \"Waste_Code211\",\n    \"Waste_Code212\",\n    \"Waste_Code213\",\n    \"Waste_Code214\",\n    \"Waste_Code215\",\n    \"Waste_Code216\",\n    \"Waste_Code217\",\n    \"Waste_Code218\",\n    \"Waste_Code219\",\n    \"Waste_Code220\",\n    \"Waste_Code221\",\n    \"Waste_Code222\",\n    \"Waste_Code223\",\n    \"Waste_Code224\",\n    \"Waste_Code225\",\n    \"Waste_Code226\",\n    \"Waste_Code227\",\n    \"Waste_Code228\",\n    \"Waste_Code229\",\n    \"Waste_Code230\",\n    \"Waste_Code231\",\n    \"Waste_Code232\",\n    \"Waste_Code233\",\n    \"Waste_Code234\",\n    \"Waste_Code235\",\n    \"Waste_Code236\",\n    \"Waste_Code237\",\n    \"Waste_Code238\",\n    \"Waste_Code239\",\n    \"Waste_Code240\",\n    \"Waste_Code241\",\n    \"LG_OutOfTole\",\n    \"TE_OutOfTole\",\n    \"ST_NotReadyForProduct\",\n    \"ST_WasteFromStacker\",\n    \"Waste_Code246\",\n    \"Waste_Code247\",\n    \"Waste_Code248\",\n    \"Waste_Code249\",\n    \"Waste_Code250\",\n    \"Waste_Code251\",\n    \"Waste_Code252\",\n    \"Waste_Code253\",\n    \"Waste_Code254\",\n    \"Waste_Code255\"\n];\n\nglobal.set(\"whId\", 9, \"file\");\nglobal.set(\"whMap\", whMap, \"file\");\n\nnode.status({\n    fill: \"green\",\n    shape: \"dot\",\n    text: \"Waste Handling mapped.\"\n});\n\n// Init out messages.\nlet map = { \"payload\": [] };\nlet params = { \"payload\": [] };\n\n// Map\nmap.payload.push({\n    \"file\": global.get(\"whMap\", \"file\")\n});\n\n// SQL Query Parameters\nmsg.params = [\n    \"{\" + global.get(\"whId\", \"file\") + \"}\",\n    \"{\" + whMap.join() + \"}\"\n]\n\nreturn [map, msg];",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 660,
        "wires": [
            [
                "211d04a9ee710611"
            ],
            []
        ]
    },
    {
        "id": "211d04a9ee710611",
        "type": "debug",
        "z": "6fbff0445efb9605",
        "g": "30f445478da1a215",
        "name": "Waste Handling Map",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 600,
        "y": 640,
        "wires": []
    },
    {
        "id": "f81f1285669d068d",
        "type": "debug",
        "z": "6fbff0445efb9605",
        "g": "2a888de502a80571",
        "name": "Query Output",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 700,
        "y": 760,
        "wires": []
    },
    {
        "id": "c6e87436e0e9e2ac",
        "type": "postgresql",
        "z": "6fbff0445efb9605",
        "g": "30f445478da1a215",
        "name": "cms",
        "query": "SELECT name, description, id as cm_id, cm_type_id FROM public.cms WHERE cm_type_id = ANY($1) AND name = ANY($2);",
        "postgreSQLConfig": "8904b4b641c67a20",
        "split": false,
        "rowsPerMsg": "1",
        "outputs": 1,
        "x": 810,
        "y": 380,
        "wires": [
            [
                "4174d43ce63ab89b"
            ]
        ]
    },
    {
        "id": "1212e8146abc9193",
        "type": "postgresql",
        "z": "6fbff0445efb9605",
        "g": "2a888de502a80571",
        "name": "cm_udt_variables",
        "query": "SELECT id as cm_udt_variable_id, cm_type_id, name FROM public.cm_udt_variables;",
        "postgreSQLConfig": "8904b4b641c67a20",
        "split": false,
        "rowsPerMsg": "1",
        "outputs": 1,
        "x": 310,
        "y": 760,
        "wires": [
            [
                "d7143c56bc3701ee"
            ]
        ]
    },
    {
        "id": "9db0cf20335c3694",
        "type": "debug",
        "z": "e0de3458817306f8",
        "name": "Metadata",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 380,
        "y": 220,
        "wires": []
    },
    {
        "id": "19b22ffac09651f6",
        "type": "function",
        "z": "e0de3458817306f8",
        "name": "OPC Connection Map",
        "func": "// Create an object containing each OPC Connector connection property with\n// different Map Objects to create correspondence between Tags IDs, Names and Types. \n// Initialize the connections Mapping Object.\nlet opcConnectionMap = {\n    \"nameList\": [],     // Array of available OPC Connections names. Order is the same in Map objects below.\n    \"typeList\": [],     // Array of available OPC Connections types. Order is the same of nameList.\n    \"nameIDMaps\": [],   // Array of Tags Names-IDs object. Order is the same of nameList.\n    \"IDnameMaps\": [],   // Array of Tags IDs-Names Map object. Order is the same of nameList.\n    \"IDTypeMaps\": [],   // Array of Tags IDs-Type Map object. Order is the same of nameList.\n};\n\n// Check Payload\nlet m = msg.payload;\n\nif (m.seq == undefined) {\n    // Update global maps.\n    global.set(\"opcConnectionMap\", null);\n    \n    // Update function node status.\n    node.status({\n        fill: \"red\",\n        shape: \"ring\",\n        text: \"OPCMap cannot be created.\"\n    });\n    \n    return null;\n}\n\n// Iterate through connections.\nfor (let i = 0; i < m.connections.length; i++) {\n    let connection = m.connections[i];\n    // Push connection name and type in global object.\n    opcConnectionMap.nameList.push(connection.name);\n    opcConnectionMap.typeList.push(connection.type);\n    \n    // Init maps.\n    let nameIDMap = new Map();\n    let IDNameMap = new Map();\n    let IDTypeMap = new Map();\n    \n    // Iterate through dataPoints.\n    let dataPoints = connection.dataPoints;\n    \n    for (let j = 0; j < dataPoints.length; j++) {\n        let dataPoint = dataPoints[j];\n        \n        // Iterate through dataPointDefinitions.\n        let dataPointDefinitions = dataPoint.dataPointDefinitions;\n        \n        for (let k = 0; k < dataPointDefinitions.length; k++) {\n            let dataPointDefinition = dataPointDefinitions[k];\n            \n            // Push in maps the datapoint property.\n            nameIDMap.set(dataPointDefinition.name, dataPointDefinition.id);\n            IDNameMap.set(dataPointDefinition.id, dataPointDefinition.name);\n            IDTypeMap.set(dataPointDefinition.id, dataPointDefinition.dataType);\n        }\n    }\n    \n    // Push mappings in global object.\n    opcConnectionMap.nameIDMaps.push(nameIDMap);\n    opcConnectionMap.IDnameMaps.push(IDNameMap);\n    opcConnectionMap.IDTypeMaps.push(IDTypeMap);\n}\n\n// Update global maps.\nglobal.set(\"opcConnectionMap\", opcConnectionMap);\n\n// Set opcConnectionMap as output payload.\nmsg.payload = opcConnectionMap;\n\n// Update function node status.\nnode.status({\n    fill: \"green\",\n    shape: \"ring\",\n    text: \"opcConnectionMap created for: \" + opcConnectionMap.nameList.join(\", \") + \".\",\n});\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 280,
        "wires": [
            [
                "6e8ba39962b48830"
            ]
        ]
    },
    {
        "id": "e8eef2f39fb92bdd",
        "type": "mqtt in",
        "z": "e0de3458817306f8",
        "name": "",
        "topic": "ie/m/j/simatic/v1/opcuac1/dp",
        "qos": "2",
        "datatype": "json",
        "broker": "c087f936f9b1d12c",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 140,
        "y": 260,
        "wires": [
            [
                "9db0cf20335c3694",
                "19b22ffac09651f6"
            ]
        ]
    },
    {
        "id": "6e8ba39962b48830",
        "type": "debug",
        "z": "e0de3458817306f8",
        "name": "OPC Connection Map",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 640,
        "y": 280,
        "wires": []
    },
    {
        "id": "8510b3fefabe4482",
        "type": "inject",
        "z": "e0de3458817306f8",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Path\":\"opcuac1\"}",
        "payloadType": "json",
        "x": 130,
        "y": 140,
        "wires": [
            [
                "f5fb9e147a26f147"
            ]
        ]
    },
    {
        "id": "f5fb9e147a26f147",
        "type": "mqtt out",
        "z": "e0de3458817306f8",
        "name": "",
        "topic": "ie/c/j/simatic/v1/updaterequest",
        "qos": "0",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "c087f936f9b1d12c",
        "x": 390,
        "y": 140,
        "wires": []
    },
    {
        "id": "3d379634e3aaf065",
        "type": "mqtt in",
        "z": "e0de3458817306f8",
        "name": "",
        "topic": "ie/#",
        "qos": "2",
        "datatype": "json",
        "broker": "c087f936f9b1d12c",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 70,
        "y": 40,
        "wires": [
            [
                "070417b0d2de4583"
            ]
        ]
    },
    {
        "id": "070417b0d2de4583",
        "type": "debug",
        "z": "e0de3458817306f8",
        "name": "ie/# Topic",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 200,
        "y": 40,
        "wires": []
    },
    {
        "id": "9fa4da98e4192b50",
        "type": "mqtt in",
        "z": "e0de3458817306f8",
        "name": "",
        "topic": "ie/s/j/simatic/v1/opcuac1/status",
        "qos": "2",
        "datatype": "json",
        "broker": "c087f936f9b1d12c",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 150,
        "y": 380,
        "wires": [
            [
                "fc4f96f3ade2b4cf"
            ]
        ]
    },
    {
        "id": "fc4f96f3ade2b4cf",
        "type": "debug",
        "z": "e0de3458817306f8",
        "name": "Status",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 350,
        "y": 380,
        "wires": []
    },
    {
        "id": "002f1d4b98827d2e",
        "type": "inject",
        "z": "84a7a2e619383c7d",
        "g": "a636e353a3bfe34b",
        "name": "daily",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "00 00 * * *",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 110,
        "y": 60,
        "wires": [
            [
                "4d83152b0ca561f7"
            ]
        ]
    },
    {
        "id": "dadc371474b5deaa",
        "type": "function",
        "z": "84a7a2e619383c7d",
        "g": "a636e353a3bfe34b",
        "name": "Status",
        "func": "if (msg.payload.length > 0 && msg.payload[0].count == 0) {\n    let ts = new Date().toISOString().substring(0, 23) + \"0000Z\";\n    global.set(\"tableCleaningTs\", ts, \"file\");\n\n    // Update function node status.\n    node.status({\n        fill: \"green\",\n        shape: \"ring\",\n        text: \"'public.variables_values' has been truncated at \" + ts + \".\",\n    });\n}",
        "outputs": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 60,
        "wires": []
    },
    {
        "id": "bd4509f685f9c8a1",
        "type": "inject",
        "z": "84a7a2e619383c7d",
        "g": "0e88c252fea2e9db",
        "name": "daily",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "00 00 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 110,
        "y": 280,
        "wires": [
            [
                "7f5b4427df8055d9"
            ]
        ]
    },
    {
        "id": "5cd39a08e3f3f749",
        "type": "function",
        "z": "84a7a2e619383c7d",
        "g": "0e88c252fea2e9db",
        "name": "Status",
        "func": "if (msg.payload.length > 0 && msg.payload[0].count == 0) {\n    let ts = new Date().toISOString().substring(0, 23) + \"0000Z\";\n    global.set(\"tableCleaningTs\", ts, \"file\");\n\n    // Update function node status.\n    node.status({\n        fill: \"green\",\n        shape: \"ring\",\n        text: \"'public.variables_values_agg1' has been truncated at \" + ts + \".\",\n    });\n}",
        "outputs": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 280,
        "wires": []
    },
    {
        "id": "d577523794e99d36",
        "type": "inject",
        "z": "84a7a2e619383c7d",
        "g": "0e88c252fea2e9db",
        "name": "daily",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "00 00 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 110,
        "y": 340,
        "wires": [
            [
                "1690b2b56bad7331"
            ]
        ]
    },
    {
        "id": "0ddc6d0ae8db5245",
        "type": "function",
        "z": "84a7a2e619383c7d",
        "g": "0e88c252fea2e9db",
        "name": "Status",
        "func": "if (msg.payload.length > 0 && msg.payload[0].count == 0) {\n    let ts = new Date().toISOString().substring(0, 23) + \"0000Z\";\n    global.set(\"tableCleaningTs\", ts, \"file\");\n\n    // Update function node status.\n    node.status({\n        fill: \"green\",\n        shape: \"ring\",\n        text: \"'public.variables_values_agg2' has been truncated at \" + ts + \".\",\n    });\n}",
        "outputs": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 340,
        "wires": []
    },
    {
        "id": "44d2f03036b29307",
        "type": "inject",
        "z": "84a7a2e619383c7d",
        "g": "0e88c252fea2e9db",
        "name": "daily",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "00 00 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 110,
        "y": 400,
        "wires": [
            [
                "c889a282b3c8a9bf"
            ]
        ]
    },
    {
        "id": "30a294f34f034704",
        "type": "function",
        "z": "84a7a2e619383c7d",
        "g": "0e88c252fea2e9db",
        "name": "Status",
        "func": "if (msg.payload.length > 0 && msg.payload[0].count == 0) {\n    let ts = new Date().toISOString().substring(0, 23) + \"0000Z\";\n    global.set(\"tableCleaningTs\", ts, \"file\");\n\n    // Update function node status.\n    node.status({\n        fill: \"green\",\n        shape: \"ring\",\n        text: \"'public.variables_values_agg3' has been truncated at \" + ts + \".\",\n    });\n}",
        "outputs": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 400,
        "wires": []
    },
    {
        "id": "7aa43b2cc656c47a",
        "type": "inject",
        "z": "84a7a2e619383c7d",
        "g": "0e88c252fea2e9db",
        "name": "daily",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "00 00 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 110,
        "y": 460,
        "wires": [
            [
                "8fb676907e74f479"
            ]
        ]
    },
    {
        "id": "c763be1fb680f2fa",
        "type": "function",
        "z": "84a7a2e619383c7d",
        "g": "0e88c252fea2e9db",
        "name": "Status",
        "func": "if (msg.payload.length > 0 && msg.payload[0].count == 0) {\n    let ts = new Date().toISOString().substring(0, 23) + \"0000Z\";\n    global.set(\"tableCleaningTs\", ts, \"file\");\n\n    // Update function node status.\n    node.status({\n        fill: \"green\",\n        shape: \"ring\",\n        text: \"'public.variables_values_agg4' has been truncated at \" + ts + \".\",\n    });\n}",
        "outputs": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 460,
        "wires": []
    },
    {
        "id": "682ec2eb1cb5d985",
        "type": "comment",
        "z": "84a7a2e619383c7d",
        "g": "a636e353a3bfe34b",
        "name": "In case of power off we flush 'variables_values' table.",
        "info": "In case of power off we flush 'variables_values' table.",
        "x": 230,
        "y": 140,
        "wires": []
    },
    {
        "id": "684723f72b727075",
        "type": "comment",
        "z": "84a7a2e619383c7d",
        "g": "a636e353a3bfe34b",
        "name": "Every time we deploy, 'variables_values' table gets truncated.",
        "info": "Every time we deploy, 'variables_values' table gets truncated.",
        "x": 260,
        "y": 180,
        "wires": []
    },
    {
        "id": "4d83152b0ca561f7",
        "type": "postgresql",
        "z": "84a7a2e619383c7d",
        "g": "a636e353a3bfe34b",
        "name": "TRUNCATE variables_values",
        "query": "TRUNCATE TABLE public.variables_values RESTART IDENTITY;\nSELECT COUNT(id) FROM public.variables_values;",
        "postgreSQLConfig": "8904b4b641c67a20",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 300,
        "y": 60,
        "wires": [
            [
                "dadc371474b5deaa"
            ]
        ]
    },
    {
        "id": "7f5b4427df8055d9",
        "type": "postgresql",
        "z": "84a7a2e619383c7d",
        "g": "0e88c252fea2e9db",
        "name": "TRUNCATE variables_values_agg1",
        "query": "TRUNCATE TABLE public.variables_values_agg1 RESTART IDENTITY;\nSELECT COUNT(id) FROM public.variables_values_agg1;",
        "postgreSQLConfig": "c3edaebc343ed0e7",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 320,
        "y": 280,
        "wires": [
            [
                "5cd39a08e3f3f749"
            ]
        ]
    },
    {
        "id": "1690b2b56bad7331",
        "type": "postgresql",
        "z": "84a7a2e619383c7d",
        "g": "0e88c252fea2e9db",
        "name": "TRUNCATE variables_values_agg2",
        "query": "TRUNCATE TABLE public.variables_values_agg2 RESTART IDENTITY;\nSELECT COUNT(id) FROM public.variables_values_agg2;",
        "postgreSQLConfig": "c3edaebc343ed0e7",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 320,
        "y": 340,
        "wires": [
            [
                "0ddc6d0ae8db5245"
            ]
        ]
    },
    {
        "id": "c889a282b3c8a9bf",
        "type": "postgresql",
        "z": "84a7a2e619383c7d",
        "g": "0e88c252fea2e9db",
        "name": "TRUNCATE variables_values_agg3",
        "query": "TRUNCATE TABLE public.variables_values_agg3 RESTART IDENTITY;\nSELECT COUNT(id) FROM public.variables_values_agg3;",
        "postgreSQLConfig": "c3edaebc343ed0e7",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 320,
        "y": 400,
        "wires": [
            [
                "30a294f34f034704"
            ]
        ]
    },
    {
        "id": "8fb676907e74f479",
        "type": "postgresql",
        "z": "84a7a2e619383c7d",
        "g": "0e88c252fea2e9db",
        "name": "TRUNCATE variables_values_agg4",
        "query": "TRUNCATE TABLE public.variables_values_agg4 RESTART IDENTITY;\nSELECT COUNT(id) FROM public.variables_values_agg4;",
        "postgreSQLConfig": "c3edaebc343ed0e7",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 320,
        "y": 460,
        "wires": [
            [
                "c763be1fb680f2fa"
            ]
        ]
    },
    {
        "id": "f29bbcdf6df56d71",
        "type": "debug",
        "z": "a7c2a0369c53c7c5",
        "name": "ie/d/j/simatic/v1/opcuac1/dp/r/main-plc/default Topic",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "true",
        "targetType": "full",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 650,
        "y": 40,
        "wires": []
    },
    {
        "id": "f83fec8182b6f756",
        "type": "mqtt in",
        "z": "a7c2a0369c53c7c5",
        "name": "",
        "topic": "ie/d/j/simatic/v1/opcuac1/dp/r/main-plc/default",
        "qos": "2",
        "datatype": "json",
        "broker": "c087f936f9b1d12c",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 190,
        "y": 100,
        "wires": [
            [
                "f29bbcdf6df56d71",
                "cb3f3618447e320e",
                "e3446db4aa570dfa",
                "8305d32097fadfba",
                "7119b143450dafdd",
                "693141292174bdfd",
                "d5fd6b636b9c2b6d"
            ]
        ]
    },
    {
        "id": "cb3f3618447e320e",
        "type": "debug",
        "z": "a7c2a0369c53c7c5",
        "name": "PLC Data",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 520,
        "y": 100,
        "wires": []
    },
    {
        "id": "86cadaba2d839e17",
        "type": "debug",
        "z": "a7c2a0369c53c7c5",
        "name": "Tags",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 870,
        "y": 160,
        "wires": []
    },
    {
        "id": "73c08be45c0c47ee",
        "type": "function",
        "z": "a7c2a0369c53c7c5",
        "name": "Variables Mapping",
        "func": "// Init.\nlet cms;\nlet params;\nlet queryParams = [];\nlet cmUDTVars = global.get(\"cmUDTVars\", \"file\");\nlet outMsg = { \"payload\": [] };\nlet queryPayload = { \"payload\": [] };\n\n// Iterate through read datapoints.\nfor (let i = 0; i < msg.payload.length; i++) {\n    switch (msg.payload[i].opcuaName) {\n        // AC Motors\n        case \"AC_Motor_Inverter_Actual_Speed\":\n        case \"AC_Motor_Speed_Setpoint\": {\n            cms = global.get(\"acm\", \"file\");\n            break;\n        }\n\n        // Axis\n        case \"AX_Dancer_Position\":\n        case \"AX_Gear\":\n        case \"AX_Phase\": {\n            cms = global.get(\"ax\", \"file\");\n            break;\n        }\n\n        // Elastic Unwinders\n        case \"EUW_Actual_DF_Speed\":\n        case \"EUW_Actual_DF_Tension\":\n        case \"EUW_Actual_TMS_Tension\": {\n            cms = global.get(\"euw\", \"file\");\n            break;\n        }\n\n        // Mills\n        case \"Mill_Rotor_Temp_DR\":\n        case \"Mill_Rotor_Temp_OP\":\n        case \"Mill_Shaft_Temp_DR\":\n        case \"Mill_Shaft_Temp_OP\": {\n            cms = global.get(\"mi\", \"file\");\n            break;\n        }\n\n        // SAP\n        case \"SAP_Actual_Weight\":\n        case \"SAP_Req_Quantity\": {\n            cms = global.get(\"sap\", \"file\");\n            break;\n        }\n\n        // Thermobonders\n        case \"THB_Up_Roll_Temp_Setpoint\":\n        case \"THB_Low_Roll_Temp_Setpoint\":\n        case \"THB_Up_Roll_Temp_Feedback\":\n        case \"THB_Low_Roll_Temp_Feedback\":\n        case \"THB_State\":\n        case \"THB_Activate\":\n        case \"THB_Up_Roll_Resistor_Activate\":\n        case \"THB_Low_Roll_Resistor_Activate\":\n        case \"THB_State\": {\n            cms = global.get(\"tb\", \"file\");\n            break;\n        }\n\n        // Unit\n        case \"PerforMATE_PML_State\":\n        case \"Performate_PML_Mode\":\n        case \"Performate_PML_Stacker_State\":\n        case \"Performate_PML_Stacker_Mode\":\n        case \"Performate_PML_Actual_Speed\":\n        case \"Performate_PML_Max_Speed\": {\n            cms = global.get(\"un\", \"file\");\n            break;\n        }\n\n        // Unwinders\n        case \"UW_Actual_Diam\":\n        case \"UW_Left_Motor_Temp\":\n        case \"UW_Right_Motor_Temp\":\n        case \"UW_Buffer_Position\":\n        case \"UW_Splice_Done\":\n        case \"UW_Filling\": {\n            cms = global.get(\"uw\", \"file\");\n            break;\n        }\n\n        // Waste Handling\n        case \"WH_First_Waste\":\n        case \"WH_Total_Waste\": {\n            cms = global.get(\"wh\", \"file\");\n            break;\n        }\n\n        // Default\n        default: {\n            cms = [];\n        }\n    }\n\n    for (let j = 0; j < cmUDTVars.length; j++) {\n        if (cmUDTVars[j].opcuaName == msg.payload[i].opcuaName) {\n            // N.B.: cms and msg.payload[i].value have the same size (if the second one is an array).\n            // We are filtering those Control Modules and Wastes which are not\n            // used to avoid writing meaningless values into the DB table.\n            params = cms\n                .map(((obj, k) => ({\n                    index: k,\n                    debug: cmUDTVars[j],\n                    ...obj,\n                    cm_udt_variable_id: cmUDTVars[j].cm_udt_variable_id,\n                    timestamp: msg.payload[i].plcTs,\n                    opc_timestamp: msg.payload[i].opcTs,\n                    value: (msg.payload[i].value[k] !== undefined) ? msg.payload[i].value[k] : msg.payload[i].value\n                })))\n                .filter(cms => cms.description != \"Spare\")\n                .map(({ index, debug, name, description, cm_type_id, ...item }) => item);\n        }\n    }\n\n    // Push to out arrays.\n    outMsg.payload.push({\n        \"opcuaName\": msg.payload[i].opcuaName,\n        \"params\": params,\n        \"plcTs\": msg.payload[i].plcTs,\n        \"opcTs\": msg.payload[i].opcTs,\n        \"qc\": msg.payload[i].qc\n    });\n\n    queryParams = [...queryParams, ...params];\n}\n\n// Send out message if something is found.\nif (outMsg.payload.length > 0) {\n    queryPayload.payload = queryParams;\n\n    return [outMsg, queryPayload];\n}",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 910,
        "y": 200,
        "wires": [
            [
                "751bbded52157810"
            ],
            [
                "984aeebb004d20fc",
                "753a3ba5b2c77f61"
            ]
        ]
    },
    {
        "id": "751bbded52157810",
        "type": "debug",
        "z": "a7c2a0369c53c7c5",
        "name": "Variables",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1120,
        "y": 160,
        "wires": []
    },
    {
        "id": "e3446db4aa570dfa",
        "type": "function",
        "z": "a7c2a0369c53c7c5",
        "name": "Timestamps",
        "func": "// Get opcConnectionMap variable.\nlet opcConnectionMap = global.get(\"opcConnectionMap\");\n\n// Find index of Simotion connection.\nlet connectionIndex = opcConnectionMap.nameList.indexOf(\"main-plc\");\n\n// Use the index to get the right map.\nlet nameIDMap = opcConnectionMap.nameIDMaps[connectionIndex];\n\n// Tags to be filtered.\nconst tagsList = [\n    \"Timestamp_10ms\",\n    \"Timestamp_50ms\",\n    \"Timestamp_100ms\",\n    \"Timestamp_250ms\",\n    \"Timestamp_500ms\",\n    \"Timestamp_1s\",\n    \"Timestamp_2s\",\n    \"Timestamp_5s\",\n    \"Timestamp_10s\",\n    \"Timestamp_1min\"\n];\n\n// Init out message.\nlet outMsg = { \"payload\": [] };\n\n/** Siemens Date_And_Time to Timestamp.\n* Byte 0\tYear\n* Byte 1\tMonth\n* Byte 2\tDay\n* Byte 3\tHour\n* Byte 4\tMinute\n* Byte 5\tSeconds\n* Byte 6 + 4 MSB(1) of Byte 7\n* (Word 6)\tMilliseconds\n* Byte 7 (4 LSB (1))\t\n\n* Weekday\n* 1: Sunday\n* 2: Monday\n* 3: Tuesday\n* 4: Wednesday\n* 5: Thursday\n* 6: Friday\n* 7: Saturday\n\n* (1) 12 bits are required to display the maximum millisecond value range of 999 in BCD format.\n* For this reason the millisecond content occupies Byte 6 and the 4 most significant bits (MSB) of Byte 7.\n* The remaining 4 least significant bits (LSB) of Byte 7 are used to code the day of the week.\n */\nfunction timeParser(tArray) {\n    // Convert Byte 7 to binary.\n    let t7Bin = tArray[7].toString(2);\n    // Binary value padding to 8 bits.\n    let t7Byte = new Array(8 - t7Bin.length).fill(0).join(\"\") + t7Bin;\n    // 3 MSB of Byte 7 to integer.\n    let msDigit3 = parseInt(t7Byte.substring(0, 3), 2);\n    // 4 LSB of Byte 7 to integer.\n    let weekday = parseInt(t7Byte.substring(4, 8), 2);\n\n    // Takes a value, it converts it to Hex and finally it converts it to Base10.\n    let timestampArray = tArray.map((v) => { return parseInt(v.toString(16), 10) });\n    let timestamp = \"20\" + timestampArray[0] + \"-\" + zeroPadNumber(timestampArray[1], 10) + \"-\" + zeroPadNumber(timestampArray[2], 10) + \"T\" +\n        zeroPadNumber(timestampArray[3], 10) + \":\" + zeroPadNumber(timestampArray[4], 10) + \":\" + zeroPadNumber(timestampArray[5], 10) +\".\" +\n        zeroPadNumber(timestampArray[6], 10) + msDigit3 + \"0000Z\";\n\n    return timestamp;\n}\n\n/**\n * Padding with trailing zeros a number lower than the set limit.\n */\nfunction zeroPadNumber(number, limit) {\n    return Number(number) < Number(limit) ? \"0\" + number : number.toString();\n}\n\n// Iterate through read datapoints.\nfor (let i = 0; i < msg.payload.vals.length; i++) {\n    for (let j = 0; j < tagsList.length; j++) {\n        // Search for the ID that corresponds to our tag name.\n        if (msg.payload.vals[i].id == nameIDMap.get(tagsList[j])) {\n            // Push to out array.\n            outMsg.payload.push({\n                \"name\": tagsList[j],\n                \"value\": timeParser(msg.payload.vals[i].val),\n                \"ts\": msg.payload.vals[i].ts,\n                \"qc\": msg.payload.vals[i].qc\n            });\n        }\n    }\n}\n\n// Send out message if something is found.\nif (outMsg.payload.length > 0) {\n    outMsg.columns = [\"ts\"].concat(tagsList);\n    \n    return outMsg;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 380,
        "wires": [
            [
                "bbb6750f33b171d6"
            ]
        ]
    },
    {
        "id": "bbb6750f33b171d6",
        "type": "debug",
        "z": "a7c2a0369c53c7c5",
        "name": "Timestamps",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 690,
        "y": 380,
        "wires": []
    },
    {
        "id": "8305d32097fadfba",
        "type": "function",
        "z": "a7c2a0369c53c7c5",
        "name": "Clocks",
        "func": "// Get opcConnectionMap variable.\nlet opcConnectionMap = global.get(\"opcConnectionMap\");\n\n// Find index of Simotion connection.\nlet connectionIndex = opcConnectionMap.nameList.indexOf(\"main-plc\");\n\n// Use the index to get the right map.\nlet nameIDMap = opcConnectionMap.nameIDMaps[connectionIndex];\n\n// Tags to be filtered.\nconst tagsList = [\n    \"Clock_10ms\",\n    \"Clock_50ms\",\n    \"Clock_100ms\",\n    \"Clock_250ms\",\n    \"Clock_500ms\",\n    \"Clock_1s\",\n    \"Clock_2s\",\n    \"Clock_5s\",\n    \"Clock_10s\",\n    \"Clock_1min\"\n];\n\n// Init out message.\nlet outMsg = { \"payload\": [] };\n\n// Iterate through read datapoints.\nfor (let i = 0; i < msg.payload.vals.length; i++) {\n    for (let j = 0; j < tagsList.length; j++) {\n        // Search for the ID that corresponds to our tag name.\n        if (msg.payload.vals[i].id == nameIDMap.get(tagsList[j])) {\n            // Push to out array.\n            outMsg.payload.push({\n                \"name\": tagsList[j],\n                \"value\": msg.payload.vals[i].val,\n                \"ts\": msg.payload.vals[i].ts,\n                \"qc\": msg.payload.vals[i].qc\n            });\n        }\n    }\n}\n\n// Send out message if something is found.\nif (outMsg.payload.length > 0) {\n    outMsg.columns = [\"ts\"].concat(tagsList);\n    \n    return outMsg;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 340,
        "wires": [
            [
                "afa561e4623ef607"
            ]
        ]
    },
    {
        "id": "afa561e4623ef607",
        "type": "debug",
        "z": "a7c2a0369c53c7c5",
        "name": "Clocks",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 670,
        "y": 340,
        "wires": []
    },
    {
        "id": "984aeebb004d20fc",
        "type": "debug",
        "z": "a7c2a0369c53c7c5",
        "name": "Variables Values",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1140,
        "y": 200,
        "wires": []
    },
    {
        "id": "aa958c2e71069269",
        "type": "debug",
        "z": "a7c2a0369c53c7c5",
        "name": "Variables Values Buffer",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1170,
        "y": 240,
        "wires": []
    },
    {
        "id": "753a3ba5b2c77f61",
        "type": "split",
        "z": "a7c2a0369c53c7c5",
        "name": "Variables Values Buffer",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": "50",
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 930,
        "y": 260,
        "wires": [
            [
                "aa958c2e71069269",
                "a2ae49c64d637c17"
            ]
        ]
    },
    {
        "id": "1af4386ffe6fe1fc",
        "type": "debug",
        "z": "a7c2a0369c53c7c5",
        "name": "Query Output",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1140,
        "y": 380,
        "wires": []
    },
    {
        "id": "a2ae49c64d637c17",
        "type": "function",
        "z": "a7c2a0369c53c7c5",
        "name": "Query",
        "func": "// Send out message if something is found.\nif (msg.payload.length > 0) {\n    // Declaring the tuples of values to be inserted into variables_values DB's table.\n    const rows = [];\n        \n    for (let i = 0; i < msg.payload.length; i++) {\n        rows.push(\"(\"\n            + \"'\" + msg.payload[i].timestamp + \"'\" + \", \"\n            + \"'\" + msg.payload[i].opc_timestamp + \"'\" + \", \"\n            + msg.payload[i].value + \", \"\n            + msg.payload[i].cm_udt_variable_id + \", \"\n            + msg.payload[i].cm_id\n            + \")\"\n        );\n    }\n\n    let params = rows.join(\", \");\n\n    msg.query = \"INSERT INTO public.variables_values(\" +\n            \"\\\"timestamp\\\", \" +\n            \"opc_timestamp, \" +\n            \"value, \" +\n            \"cm_udt_variable_id, \" +\n            \"cm_id\" +\n            \")\" +\n        \" VALUES \" +\n            params +\n        \" RETURNING *;\";\n\n    // Debug\n    msg.payload = msg.query;\n\n    return msg; \n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1110,
        "y": 280,
        "wires": [
            [
                "84602ef67b8c39ef",
                "40288f5826576bb1"
            ]
        ]
    },
    {
        "id": "40288f5826576bb1",
        "type": "debug",
        "z": "a7c2a0369c53c7c5",
        "name": "Query",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1250,
        "y": 280,
        "wires": []
    },
    {
        "id": "298fc26d6bf746d8",
        "type": "function",
        "z": "a7c2a0369c53c7c5",
        "name": "Filter",
        "func": "// Get opcConnectionMap variable.\nlet opcConnectionMap = global.get(\"opcConnectionMap\");\n\n// Find index of Simatic PLC connection.\nlet connectionIndex = opcConnectionMap.nameList.indexOf(\"main-plc\");\n\n// Use the index to get the right map.\nlet nameIDMap = opcConnectionMap.nameIDMaps[connectionIndex];\n\n// Tags to be filtered.\nconst tsList = msg.payload[0].tsList;\nconst tagsList = msg.payload[0].tagsList;\n\n// Init.\nlet defaultTs = \"1970-01-01T00:00:00.0000000Z\";\nlet plcTs = defaultTs;\nlet opcTs = defaultTs;\n\nlet eps = global.get(\"epsPlc\", \"file\");\nlet queueTol = global.get(\"queueTol\", \"file\");\n\nlet outMsg = { \"payload\": [] };\n\n/** Siemens Date_And_Time to Timestamp.\n * Byte 0\tYear\n * Byte 1\tMonth\n * Byte 2\tDay\n * Byte 3\tHour\n * Byte 4\tMinute\n * Byte 5\tSeconds\n *\n * Byte 6 + 4 MSB(1) of Byte 7\n * (Word 6)\tMilliseconds\n * \n * Byte 7 (4 LSB (1))\t\n * Weekday\n * 1: Sunday\n * 2: Monday\n * 3: Tuesday\n * 4: Wednesday\n * 5: Thursday\n * 6: Friday\n * 7: Saturday\n\n * (1) 12 bits are required to display the maximum millisecond value range of 999 in BCD format.\n * For this reason the millisecond content occupies Byte 6 and the 4 most significant bits (MSB) of Byte 7.\n * The remaining 4 least significant bits (LSB) of Byte 7 are used to code the day of the week.\n */\nfunction timeParser(tArray) {\n    // Convert Byte 7 to binary.\n    let t7Bin = tArray[7].toString(2);\n    // Binary value padding to 8 bits.\n    let t7Byte = new Array(8 - t7Bin.length).fill(0).join(\"\") + t7Bin;\n    // 3 MSB of Byte 7 to integer.\n    let msDigit3 = parseInt(t7Byte.substring(0, 3), 2);\n    // 4 LSB of Byte 7 to integer.\n    let weekday = parseInt(t7Byte.substring(4, 8), 2);\n\n    // Takes a value, it converts it to Hex and finally it converts it to Base10.\n    let timestampArray = tArray.map((v) => { return parseInt(v.toString(16), 10) });\n    let timestamp = \"20\" + timestampArray[0] + \"-\" + zeroPadNumber(timestampArray[1], 10) + \"-\" + zeroPadNumber(timestampArray[2], 10) + \"T\" +\n        zeroPadNumber(timestampArray[3], 10) + \":\" + zeroPadNumber(timestampArray[4], 10) + \":\" + zeroPadNumber(timestampArray[5], 10) +\".\" +\n        zeroPadNumber(timestampArray[6], 10) + msDigit3 + \"0000Z\";\n\n    return timestamp;\n}\n\n/**\n * Padding with trailing zeros a number lower than the set limit.\n */\n/**\n* @param {string | number} number\n* @param {number} limit\n*/\nfunction zeroPadNumber(number, limit) {\n    return Number(number) < Number(limit) ? \"0\" + number : number.toString();\n}\n\n/**\n * Message filtering using PLC and OPC UA timestamps.\n * Minimum Sampling = 100 ms = 10 Hz OPC Client\n * Shannon => 20 Hz = 50 ms Sampling OPC Server\n */\nfunction messageFilter(plcTs, opcTs, eps, queueTol) {\n    let unixPlcTs = Date.parse(plcTs);\n    let unixOpcTs = Date.parse(opcTs);\n    let cUnixPlcTs = Date.parse(global.get(\"cUnixPlcTs\"));\n    let deltaTs = Math.abs(cUnixPlcTs - unixOpcTs);\n    let tolerance = eps + queueTol;\n    \n    if (plcTs != defaultTs) {\n        global.set(\"cUnixPlcTs\", plcTs);    // Caching New PLC Timestamp\n        deltaTs = Math.abs(unixPlcTs - unixOpcTs);\n        \n        return { insert: true, dbTs: plcTs, deltaTs: deltaTs };\n    } else if (deltaTs < tolerance) {\n        return { insert: true, dbTs: cUnixPlcTs, deltaTs: deltaTs };\n    } else {\n        return { insert: false, tolerance: tolerance, unixPlcTs: unixPlcTs, unixOpcTs: unixOpcTs, cUnixPlcTs: cUnixPlcTs, deltaTs: deltaTs };\n    }\n}\n\n// Iterate through read datapoints (Timestamps).\nfor (let i = 0; i < msg.payload[0].data.vals.length; i++) {\n    for (let j = 0; j < tsList.length; j++) {\n        // Search for the ID that corresponds to our tag name.\n        if (msg.payload[0].data.vals[i].id == nameIDMap.get(tsList[j])) {\n            plcTs = timeParser(msg.payload[0].data.vals[i].val);\n            opcTs = msg.payload[0].data.vals[i].ts;\n            messageFilter(plcTs, opcTs, eps, queueTol);\n        }\n    }\n}\n\n// Iterate through read datapoints (Variables).\nfor (let i = 0; i < msg.payload[0].data.vals.length; i++) {\n    for (let j = 0; j < tagsList.length; j++) {\n        // Search for the ID that corresponds to our tag name.\n        if (msg.payload[0].data.vals[i].id == nameIDMap.get(tagsList[j])) {\n            opcTs = msg.payload[0].data.vals[i].ts;\n            let output = messageFilter(plcTs, opcTs, eps, queueTol);\n\n            if (output.insert) {\n                // Push to out array.\n                outMsg.payload.push({\n                    \"opcuaName\": tagsList[j],\n                    \"messageFilter\": messageFilter(plcTs, opcTs, eps, queueTol),\n                    \"value\": msg.payload[0].data.vals[i].val,\n                    \"plcTs\": plcTs,\n                    \"opcTs\": opcTs,\n                    \"qc\": msg.payload[0].data.vals[i].qc\n                });\n            }\n        }\n    }\n}\n\n// Send out message if something is found.\nif (outMsg.payload.length > 0) {\n    outMsg.columns = [\"ts\"].concat(tagsList);\n    \n    return outMsg;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 200,
        "wires": [
            [
                "86cadaba2d839e17",
                "73c08be45c0c47ee"
            ]
        ]
    },
    {
        "id": "7119b143450dafdd",
        "type": "function",
        "z": "a7c2a0369c53c7c5",
        "name": "Tags [100 ms]",
        "func": "// Tags to be filtered.\nconst tsList = [\n    \"Timestamp_100ms\"\n];\n\nconst tagsList = [\n    \"AX_Dancer_Position\",\n    \"AX_Gear\",\n    \"AX_Phase\",\n    \"EUW_Actual_DF_Speed\",\n    \"EUW_Actual_DF_Tension\",\n    \"EUW_Actual_TMS_Tension\",\n    \"AC_Motor_Speed_Setpoint\",\n    \"EUW_Tension_Tolerance\",\n    \"SAP_Req_Quantity\",\n    \"THB_Up_Roll_Temp_Setpoint\",\n    \"THB_Low_Roll_Temp_Setpoint\",\n    \"THB_State\",\n    \"THB_Activate\",\n    \"THB_Up_Roll_Resistor_Activate\",\n    \"THB_Low_Roll_Resistor_Activate\",\n    \"UW_Buffer_Position\",\n    \"UW_Splice_Done\",\n    \"UW_Filling\",\n    \"PerforMATE_PML_State\",\n    \"Performate_PML_Mode\",\n    \"Performate_PML_Stacker_State\",\n    \"Performate_PML_Stacker_Mode\",\n    \"Performate_PML_Actual_Speed\",\n    \"Performate_PML_Max_Speed\"\n];\n\n// Init out message.\nlet outMsg = { \"payload\": [] };\n\n// Push to out array.\noutMsg.payload.push({\n    \"tsList\": tsList,\n    \"tagsList\": tagsList,\n    \"data\": msg.payload\n});\n\n// Send out message if something is found.\nif (outMsg.payload.length > 0) {\n    return outMsg;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 160,
        "wires": [
            [
                "298fc26d6bf746d8"
            ]
        ]
    },
    {
        "id": "693141292174bdfd",
        "type": "function",
        "z": "a7c2a0369c53c7c5",
        "name": "Tags [60.000 ms]",
        "func": "// Tags to be filtered.\nconst tsList = [\n    \"Timestamp_1min\"\n];\n\nconst tagsList = [\n    \"UW_Left_Motor_Temp\",\n    \"UW_Right_Motor_Temp\",\n    \"THB_Up_Roll_Temp_Feedback\",\n    \"THB_Low_Roll_Temp_Feedback\"\n];\n\n// Init out message.\nlet outMsg = { \"payload\": [] };\n\n// Push to out array.\noutMsg.payload.push({\n    \"tsList\": tsList,\n    \"tagsList\": tagsList,\n    \"data\": msg.payload\n});\n\n// Send out message if something is found.\nif (outMsg.payload.length > 0) {\n    return outMsg;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 240,
        "wires": [
            [
                "298fc26d6bf746d8"
            ]
        ]
    },
    {
        "id": "d5fd6b636b9c2b6d",
        "type": "function",
        "z": "a7c2a0369c53c7c5",
        "name": "Tags [1.000 ms]",
        "func": "// Tags to be filtered.\nconst tsList = [\n    \"Timestamp_1s\"\n];\n\nconst tagsList = [\n    \"AC_Motor_Inverter_Actual_Speed\",\n    \"Mill_Rotor_Temp_DR\",\n    \"Mill_Rotor_Temp_OP\",\n    \"Mill_Shaft_Temp_DR\",\n    \"Mill_Shaft_Temp_OP\",\n    \"SAP_Actual_Weight\",\n    \"UW_Actual_Diam\",\n    \"WH_First_Waste\",\n    \"WH_Total_Waste\"\n];\n\n// Init out message.\nlet outMsg = { \"payload\": [] };\n\n// Push to out array.\noutMsg.payload.push({\n    \"tsList\": tsList,\n    \"tagsList\": tagsList,\n    \"data\": msg.payload\n});\n\n// Send out message if something is found.\nif (outMsg.payload.length > 0) {\n    return outMsg;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 200,
        "wires": [
            [
                "298fc26d6bf746d8"
            ]
        ]
    },
    {
        "id": "3dafe0c1f0a71bae",
        "type": "catch",
        "z": "a7c2a0369c53c7c5",
        "name": "Syntax Error",
        "scope": [
            "84602ef67b8c39ef"
        ],
        "uncaught": false,
        "x": 1130,
        "y": 420,
        "wires": [
            [
                "88582e7d4aab17e4"
            ]
        ]
    },
    {
        "id": "88582e7d4aab17e4",
        "type": "debug",
        "z": "a7c2a0369c53c7c5",
        "name": "Debug Error",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1290,
        "y": 420,
        "wires": []
    },
    {
        "id": "84602ef67b8c39ef",
        "type": "postgresql",
        "z": "a7c2a0369c53c7c5",
        "name": "oee_rt_app4-variables_values",
        "query": "",
        "postgreSQLConfig": "8904b4b641c67a20",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1190,
        "y": 320,
        "wires": [
            [
                "1af4386ffe6fe1fc"
            ]
        ]
    },
    {
        "id": "e83df2fff9a359c1",
        "type": "debug",
        "z": "587d0a516f150445",
        "name": "ie/d/j/simatic/v1/opcuac1/dp/r/d445-2_ak42/default Topic",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "true",
        "targetType": "full",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 670,
        "y": 40,
        "wires": []
    },
    {
        "id": "3e597d7f96e91bb9",
        "type": "mqtt in",
        "z": "587d0a516f150445",
        "name": "",
        "topic": "ie/d/j/simatic/v1/opcuac1/dp/r/d445-2_ak42/default",
        "qos": "2",
        "datatype": "json",
        "broker": "c087f936f9b1d12c",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 210,
        "y": 100,
        "wires": [
            [
                "e83df2fff9a359c1",
                "5833da022c92970a",
                "8c03df50cb4f38c0"
            ]
        ]
    },
    {
        "id": "5833da022c92970a",
        "type": "debug",
        "z": "587d0a516f150445",
        "name": "Simotion Data",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 540,
        "y": 100,
        "wires": []
    },
    {
        "id": "30dfb4e89c288001",
        "type": "debug",
        "z": "587d0a516f150445",
        "name": "ie/d/j/simatic/v1/opcuac1/dp/r/d445-2_ak50/default Topic",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "true",
        "targetType": "full",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 670,
        "y": 260,
        "wires": []
    },
    {
        "id": "71855620cd03d688",
        "type": "mqtt in",
        "z": "587d0a516f150445",
        "name": "",
        "topic": "ie/d/j/simatic/v1/opcuac1/dp/r/d445-2_ak50/default",
        "qos": "2",
        "datatype": "json",
        "broker": "c087f936f9b1d12c",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 210,
        "y": 320,
        "wires": [
            [
                "30dfb4e89c288001",
                "c0fe6354f056a639",
                "22cd636d5c9c52e9"
            ]
        ]
    },
    {
        "id": "c0fe6354f056a639",
        "type": "debug",
        "z": "587d0a516f150445",
        "name": "Simotion Data",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 540,
        "y": 320,
        "wires": []
    },
    {
        "id": "5a40af4153752979",
        "type": "function",
        "z": "587d0a516f150445",
        "name": "Filter",
        "func": "// Get opcConnectionMap variable.\nlet opcConnectionMap = global.get(\"opcConnectionMap\");\n\n// Find index of Simotion connection.\nlet connectionIndex = opcConnectionMap.nameList.indexOf(msg.payload[0].connection);\n\n// Use the index to get the right map.\nlet nameIDMap = opcConnectionMap.nameIDMaps[connectionIndex];\n\n// Tags to be filtered.\nconst tsList = msg.payload[0].tsList;\nconst tagsList = msg.payload[0].tagsList;\n\n// Init.\nlet defaultTs = \"1970-01-01T00:00:00.0000000Z\";\nlet simotionTs = defaultTs;\nlet opcTs = defaultTs;\n\nlet eps = global.get(\"epsSimotion\", \"file\");\nlet queueTol = global.get(\"queueTol\", \"file\");\n\nlet opcuaName;\n\nlet outMsg = { \"payload\": [] };\n\n// Regex array.\nconst regex = [\n    /^AX_[0-9]+_Deviation$/g,\n    /^AX_[0-9]+_Motor_Speed$/g,\n    /^AX_[0-9]+_Temperature$/g,\n    /^AX_[0-9]+_Torque_Utilization$/g\n];\n\n/**\n * Message filtering using Simotion and OPC UA timestamps.\n * Minimum Sampling = 100 ms = 10 Hz OPC Client\n * Shannon => 20 Hz = 50 ms Sampling OPC Server\n */\nfunction messageFilter(simotionTs, opcTs, eps, queueTol) {\n    let unixSimotionTs = Date.parse(simotionTs);\n    let unixOpcTs = Date.parse(opcTs);\n    let cUnixSimotionTs = Date.parse(global.get(\"cUnixSimotionTs\"));\n    let deltaTs = Math.abs(cUnixSimotionTs - unixOpcTs);\n    let tolerance = eps + queueTol;\n    \n    if (simotionTs != defaultTs) {\n        global.set(\"cUnixSimotionTs\", simotionTs);    // Caching New Simotion Timestamp\n        deltaTs = Math.abs(unixSimotionTs - unixOpcTs);\n        \n        return { insert: true, dbTs: simotionTs, deltaTs: deltaTs };\n    } else if (deltaTs < tolerance) {\n        return { insert: true, dbTs: cUnixSimotionTs, deltaTs: deltaTs };\n    } else {\n        return { insert: false, tolerance: tolerance, unixPlcTs: unixSimotionTs, unixOpcTs: unixOpcTs, cUnixPlcTs: cUnixSimotionTs, deltaTs: deltaTs };\n    }\n}\n\n// Iterate through read datapoints (Timestamps).\nfor (let i = 0; i < msg.payload[0].data.vals.length; i++) {\n    for (let j = 0; j < tsList.length; j++) {\n        // Search for the ID that corresponds to our tag name.\n        if (msg.payload[0].data.vals[i].id == nameIDMap.get(tsList[j])) {\n            simotionTs = msg.payload[0].data.vals[i].val.replace(/Z/g, \"0000Z\");\n            opcTs = msg.payload[0].data.vals[i].ts;\n            messageFilter(simotionTs, opcTs, eps, queueTol);\n        }\n    }\n}\n\n// Iterate through read datapoints (Variables).\nfor (let i = 0; i < msg.payload[0].data.vals.length; i++) {\n    for (let j = 0; j < tagsList.length; j++) {\n        // Search for the ID that corresponds to our tag name.\n        if (msg.payload[0].data.vals[i].id == nameIDMap.get(tagsList[j])) {\n            opcTs = msg.payload[0].data.vals[i].ts;\n            let output = messageFilter(simotionTs, opcTs, eps, queueTol);\n\n            // Axis index.\n            const axisIndex = tagsList[j].split(\"_\")[1].replace(/^[0]+/g, \"\") - 1;\n\n            // Setting the proper OPC UA tag name.\n            if (tagsList[j].match(regex[0])) {\n                opcuaName = \"AX_Deviation\";\n            } else if (tagsList[j].match(regex[1])) {\n                opcuaName = \"AX_Motor_Speed\";\n            } else if (tagsList[j].match(regex[2])) {\n                opcuaName = \"AX_Temperature\";\n            } else if (tagsList[j].match(regex[3])) {\n                opcuaName = \"AX_Torque_Utilization\";\n            }\n\n            if (output.insert) {\n            // Push to out array.\n                outMsg.payload.push({\n                    \"axisIndex\": axisIndex,\n                    \"opcuaName\": opcuaName,\n                    \"messageFilter\": messageFilter(simotionTs, opcTs, eps, queueTol),\n                    \"value\": msg.payload[0].data.vals[i].val,\n                    \"simotionTs\": simotionTs,\n                    \"opcTs\": opcTs,\n                    \"qc\": msg.payload[0].data.vals[i].qc\n                });\n            }\n        }\n    }\n}\n\n// Send out message if something is found.\nif (outMsg.payload.length > 0) {\n    outMsg.columns = [\"ts\"].concat(tagsList);\n    \n    return outMsg;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1090,
        "y": 420,
        "wires": [
            [
                "5c99acb69ecdb09a",
                "b61a860d875340d4"
            ]
        ]
    },
    {
        "id": "5c99acb69ecdb09a",
        "type": "debug",
        "z": "587d0a516f150445",
        "name": "Tags",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1230,
        "y": 380,
        "wires": []
    },
    {
        "id": "295df6d114a4388f",
        "type": "debug",
        "z": "587d0a516f150445",
        "name": "ie/d/j/simatic/v1/opcuac1/dp/r/d445-2_ak51/default Topic",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "true",
        "targetType": "full",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 670,
        "y": 480,
        "wires": []
    },
    {
        "id": "f2cc5f458183c2b3",
        "type": "mqtt in",
        "z": "587d0a516f150445",
        "name": "",
        "topic": "ie/d/j/simatic/v1/opcuac1/dp/r/d445-2_ak51/default",
        "qos": "2",
        "datatype": "json",
        "broker": "c087f936f9b1d12c",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 210,
        "y": 540,
        "wires": [
            [
                "295df6d114a4388f",
                "9b63233a68880352",
                "b51c3a307a0bf7fa"
            ]
        ]
    },
    {
        "id": "9b63233a68880352",
        "type": "debug",
        "z": "587d0a516f150445",
        "name": "Simotion Data",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 540,
        "y": 540,
        "wires": []
    },
    {
        "id": "d117b9e7a9f12e88",
        "type": "debug",
        "z": "587d0a516f150445",
        "name": "ie/d/j/simatic/v1/opcuac1/dp/r/d445-2_ak52/default Topic",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "true",
        "targetType": "full",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 670,
        "y": 700,
        "wires": []
    },
    {
        "id": "1310a4909db40587",
        "type": "mqtt in",
        "z": "587d0a516f150445",
        "name": "",
        "topic": "ie/d/j/simatic/v1/opcuac1/dp/r/d445-2_ak52/default",
        "qos": "2",
        "datatype": "json",
        "broker": "c087f936f9b1d12c",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 210,
        "y": 760,
        "wires": [
            [
                "d117b9e7a9f12e88",
                "8618ffbded0f3f2c",
                "1b9a28c051052ffb"
            ]
        ]
    },
    {
        "id": "8618ffbded0f3f2c",
        "type": "debug",
        "z": "587d0a516f150445",
        "name": "Simotion Data",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 540,
        "y": 760,
        "wires": []
    },
    {
        "id": "22cd636d5c9c52e9",
        "type": "function",
        "z": "587d0a516f150445",
        "name": "Tags",
        "func": "// Tags to be filtered.\nconst tsList = [\n    \"Timestamp_100ms\"\n];\n\nconst tagsList = [\n    \"AX_023_Deviation\",\n    \"AX_023_Motor_Speed\",\n    \"AX_023_Temperature\",\n    \"AX_023_Torque_Utilization\",\n    \"AX_024_Deviation\",\n    \"AX_024_Motor_Speed\",\n    \"AX_024_Temperature\",\n    \"AX_024_Torque_Utilization\",\n    \"AX_025_Deviation\",\n    \"AX_025_Motor_Speed\",\n    \"AX_025_Temperature\",\n    \"AX_025_Torque_Utilization\",\n    \"AX_026_Deviation\",\n    \"AX_026_Motor_Speed\",\n    \"AX_026_Temperature\",\n    \"AX_026_Torque_Utilization\",\n    \"AX_027_Deviation\",\n    \"AX_027_Motor_Speed\",\n    \"AX_027_Temperature\",\n    \"AX_027_Torque_Utilization\",\n    \"AX_028_Deviation\",\n    \"AX_028_Motor_Speed\",\n    \"AX_028_Temperature\",\n    \"AX_028_Torque_Utilization\",\n    \"AX_029_Deviation\",\n    \"AX_029_Motor_Speed\",\n    \"AX_029_Temperature\",\n    \"AX_029_Torque_Utilization\",\n    \"AX_030_Deviation\",\n    \"AX_030_Motor_Speed\",\n    \"AX_030_Temperature\",\n    \"AX_030_Torque_Utilization\",\n    \"AX_031_Deviation\",\n    \"AX_031_Motor_Speed\",\n    \"AX_031_Temperature\",\n    \"AX_031_Torque_Utilization\",\n    \"AX_032_Deviation\",\n    \"AX_032_Motor_Speed\",\n    \"AX_032_Temperature\",\n    \"AX_032_Torque_Utilization\",\n    \"AX_033_Deviation\",\n    \"AX_033_Motor_Speed\",\n    \"AX_033_Temperature\",\n    \"AX_033_Torque_Utilization\",\n    \"AX_034_Deviation\",\n    \"AX_034_Motor_Speed\",\n    \"AX_034_Temperature\",\n    \"AX_034_Torque_Utilization\",\n    \"AX_035_Deviation\",\n    \"AX_035_Motor_Speed\",\n    \"AX_035_Temperature\",\n    \"AX_035_Torque_Utilization\",\n    \"AX_036_Deviation\",\n    \"AX_036_Motor_Speed\",\n    \"AX_036_Temperature\",\n    \"AX_036_Torque_Utilization\",\n    \"AX_037_Deviation\",\n    \"AX_037_Motor_Speed\",\n    \"AX_037_Temperature\",\n    \"AX_037_Torque_Utilization\",\n    \"AX_038_Deviation\",\n    \"AX_038_Motor_Speed\",\n    \"AX_038_Temperature\",\n    \"AX_038_Torque_Utilization\",\n    \"AX_039_Deviation\",\n    \"AX_039_Motor_Speed\",\n    \"AX_039_Temperature\",\n    \"AX_039_Torque_Utilization\",\n    \"AX_040_Deviation\",\n    \"AX_040_Motor_Speed\",\n    \"AX_040_Temperature\",\n    \"AX_040_Torque_Utilization\",\n    \"AX_041_Deviation\",\n    \"AX_041_Motor_Speed\",\n    \"AX_041_Temperature\",\n    \"AX_041_Torque_Utilization\",\n    \"AX_042_Deviation\",\n    \"AX_042_Motor_Speed\",\n    \"AX_042_Temperature\",\n    \"AX_042_Torque_Utilization\",\n    \"AX_043_Deviation\",\n    \"AX_043_Motor_Speed\",\n    \"AX_043_Temperature\",\n    \"AX_043_Torque_Utilization\",\n    \"AX_044_Deviation\",\n    \"AX_044_Motor_Speed\",\n    \"AX_044_Temperature\",\n    \"AX_044_Torque_Utilization\"\n];\n\n// Init out message.\nlet outMsg = { \"payload\": [] };\n\n// Push to out array.\noutMsg.payload.push({\n    \"tsList\": tsList,\n    \"tagsList\": tagsList,\n    \"connection\": \"d445-2_ak50\",\n    \"data\": msg.payload\n});\n\n// Send out message if something is found.\nif (outMsg.payload.length > 0) {\n    return outMsg;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 380,
        "wires": [
            [
                "5a40af4153752979"
            ]
        ]
    },
    {
        "id": "8c03df50cb4f38c0",
        "type": "function",
        "z": "587d0a516f150445",
        "name": "Tags",
        "func": "// Tags to be filtered.\nconst tagsList = [\n    \"AX_001_Deviation\",\n    \"AX_001_Motor_Speed\",\n    \"AX_001_Temperature\",\n    \"AX_001_Torque_Utilization\",\n    \"AX_002_Deviation\",\n    \"AX_002_Motor_Speed\",\n    \"AX_002_Temperature\",\n    \"AX_002_Torque_Utilization\",\n    \"AX_003_Deviation\",\n    \"AX_003_Motor_Speed\",\n    \"AX_003_Temperature\",\n    \"AX_003_Torque_Utilization\",\n    \"AX_004_Deviation\",\n    \"AX_004_Motor_Speed\",\n    \"AX_004_Temperature\",\n    \"AX_004_Torque_Utilization\",\n    \"AX_005_Deviation\",\n    \"AX_005_Motor_Speed\",\n    \"AX_005_Temperature\",\n    \"AX_005_Torque_Utilization\",\n    \"AX_006_Deviation\",\n    \"AX_006_Motor_Speed\",\n    \"AX_006_Temperature\",\n    \"AX_006_Torque_Utilization\",\n    \"AX_007_Deviation\",\n    \"AX_007_Motor_Speed\",\n    \"AX_007_Temperature\",\n    \"AX_007_Torque_Utilization\",\n    \"AX_008_Deviation\",\n    \"AX_008_Motor_Speed\",\n    \"AX_008_Temperature\",\n    \"AX_008_Torque_Utilization\",\n    \"AX_009_Deviation\",\n    \"AX_009_Motor_Speed\",\n    \"AX_009_Temperature\",\n    \"AX_009_Torque_Utilization\",\n    \"AX_010_Deviation\",\n    \"AX_010_Motor_Speed\",\n    \"AX_010_Temperature\",\n    \"AX_010_Torque_Utilization\",\n    \"AX_011_Deviation\",\n    \"AX_011_Motor_Speed\",\n    \"AX_011_Temperature\",\n    \"AX_011_Torque_Utilization\",\n    \"AX_012_Deviation\",\n    \"AX_012_Motor_Speed\",\n    \"AX_012_Temperature\",\n    \"AX_012_Torque_Utilization\",\n    \"AX_013_Deviation\",\n    \"AX_013_Motor_Speed\",\n    \"AX_013_Temperature\",\n    \"AX_013_Torque_Utilization\",\n    \"AX_014_Deviation\",\n    \"AX_014_Motor_Speed\",\n    \"AX_014_Temperature\",\n    \"AX_014_Torque_Utilization\",\n    \"AX_015_Deviation\",\n    \"AX_015_Motor_Speed\",\n    \"AX_015_Temperature\",\n    \"AX_015_Torque_Utilization\",\n    \"AX_016_Deviation\",\n    \"AX_016_Motor_Speed\",\n    \"AX_016_Temperature\",\n    \"AX_016_Torque_Utilization\",\n    \"AX_017_Deviation\",\n    \"AX_017_Motor_Speed\",\n    \"AX_017_Temperature\",\n    \"AX_017_Torque_Utilization\",\n    \"AX_018_Deviation\",\n    \"AX_018_Motor_Speed\",\n    \"AX_018_Temperature\",\n    \"AX_018_Torque_Utilization\",\n    \"AX_019_Deviation\",\n    \"AX_019_Motor_Speed\",\n    \"AX_019_Temperature\",\n    \"AX_019_Torque_Utilization\",\n    \"AX_020_Deviation\",\n    \"AX_020_Motor_Speed\",\n    \"AX_020_Temperature\",\n    \"AX_020_Torque_Utilization\",\n    \"AX_021_Deviation\",\n    \"AX_021_Motor_Speed\",\n    \"AX_021_Temperature\",\n    \"AX_021_Torque_Utilization\",\n    \"AX_022_Deviation\",\n    \"AX_022_Motor_Speed\",\n    \"AX_022_Temperature\",\n    \"AX_022_Torque_Utilization\"\n];\n\n// Init out message.\nlet outMsg = { \"payload\": [] };\n\n// Push to out array.\noutMsg.payload.push({\n    \"tagsList\": tagsList,\n    \"connection\": \"d445-2_ak42\",\n    \"data\": msg.payload\n});\n\n// Send out message if something is found.\nif (outMsg.payload.length > 0) {\n    return outMsg;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 160,
        "wires": [
            [
                "5a40af4153752979"
            ]
        ]
    },
    {
        "id": "b51c3a307a0bf7fa",
        "type": "function",
        "z": "587d0a516f150445",
        "name": "Tags",
        "func": "// Tags to be filtered.\nconst tagsList = [\n    \"AX_045_Deviation\",\n    \"AX_045_Motor_Speed\",\n    \"AX_045_Temperature\",\n    \"AX_045_Torque_Utilization\",\n    \"AX_046_Deviation\",\n    \"AX_046_Motor_Speed\",\n    \"AX_046_Temperature\",\n    \"AX_046_Torque_Utilization\",\n    \"AX_047_Deviation\",\n    \"AX_047_Motor_Speed\",\n    \"AX_047_Temperature\",\n    \"AX_047_Torque_Utilization\",\n    \"AX_048_Deviation\",\n    \"AX_048_Motor_Speed\",\n    \"AX_048_Temperature\",\n    \"AX_048_Torque_Utilization\",\n    \"AX_049_Deviation\",\n    \"AX_049_Motor_Speed\",\n    \"AX_049_Temperature\",\n    \"AX_049_Torque_Utilization\",\n    \"AX_050_Deviation\",\n    \"AX_050_Motor_Speed\",\n    \"AX_050_Temperature\",\n    \"AX_050_Torque_Utilization\",\n    \"AX_051_Deviation\",\n    \"AX_051_Motor_Speed\",\n    \"AX_051_Temperature\",\n    \"AX_051_Torque_Utilization\",\n    \"AX_052_Deviation\",\n    \"AX_052_Motor_Speed\",\n    \"AX_052_Temperature\",\n    \"AX_052_Torque_Utilization\",\n    \"AX_053_Deviation\",\n    \"AX_053_Motor_Speed\",\n    \"AX_053_Temperature\",\n    \"AX_053_Torque_Utilization\",\n    \"AX_054_Deviation\",\n    \"AX_054_Motor_Speed\",\n    \"AX_054_Temperature\",\n    \"AX_054_Torque_Utilization\",\n    \"AX_055_Deviation\",\n    \"AX_055_Motor_Speed\",\n    \"AX_055_Temperature\",\n    \"AX_055_Torque_Utilization\",\n    \"AX_056_Deviation\",\n    \"AX_056_Motor_Speed\",\n    \"AX_056_Temperature\",\n    \"AX_056_Torque_Utilization\",\n    \"AX_057_Deviation\",\n    \"AX_057_Motor_Speed\",\n    \"AX_057_Temperature\",\n    \"AX_057_Torque_Utilization\",\n    \"AX_058_Deviation\",\n    \"AX_058_Motor_Speed\",\n    \"AX_058_Temperature\",\n    \"AX_058_Torque_Utilization\",\n    \"AX_059_Deviation\",\n    \"AX_059_Motor_Speed\",\n    \"AX_059_Temperature\",\n    \"AX_059_Torque_Utilization\",\n    \"AX_060_Deviation\",\n    \"AX_060_Motor_Speed\",\n    \"AX_060_Temperature\",\n    \"AX_060_Torque_Utilization\",\n    \"AX_061_Deviation\",\n    \"AX_061_Motor_Speed\",\n    \"AX_061_Temperature\",\n    \"AX_061_Torque_Utilization\",\n    \"AX_062_Deviation\",\n    \"AX_062_Motor_Speed\",\n    \"AX_062_Temperature\",\n    \"AX_062_Torque_Utilization\",\n    \"AX_063_Deviation\",\n    \"AX_063_Motor_Speed\",\n    \"AX_063_Temperature\",\n    \"AX_063_Torque_Utilization\",\n    \"AX_064_Deviation\",\n    \"AX_064_Motor_Speed\",\n    \"AX_064_Temperature\",\n    \"AX_064_Torque_Utilization\",\n    \"AX_065_Deviation\",\n    \"AX_065_Motor_Speed\",\n    \"AX_065_Temperature\",\n    \"AX_065_Torque_Utilization\",\n    \"AX_066_Deviation\",\n    \"AX_066_Motor_Speed\",\n    \"AX_066_Temperature\",\n    \"AX_066_Torque_Utilization\"\n];\n\n// Init out message.\nlet outMsg = { \"payload\": [] };\n\n// Push to out array.\noutMsg.payload.push({\n    \"tagsList\": tagsList,\n    \"connection\": \"d445-2_ak51\",\n    \"data\": msg.payload\n});\n\n// Send out message if something is found.\nif (outMsg.payload.length > 0) {\n    return outMsg;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 600,
        "wires": [
            [
                "5a40af4153752979"
            ]
        ]
    },
    {
        "id": "1b9a28c051052ffb",
        "type": "function",
        "z": "587d0a516f150445",
        "name": "Tags",
        "func": "// Tags to be filtered.\nconst tagsList = [\n    \"AX_067_Deviation\",\n    \"AX_067_Motor_Speed\",\n    \"AX_067_Temperature\",\n    \"AX_067_Torque_Utilization\",\n    \"AX_068_Deviation\",\n    \"AX_068_Motor_Speed\",\n    \"AX_068_Temperature\",\n    \"AX_068_Torque_Utilization\",\n    \"AX_069_Deviation\",\n    \"AX_069_Motor_Speed\",\n    \"AX_069_Temperature\",\n    \"AX_069_Torque_Utilization\",\n    \"AX_070_Deviation\",\n    \"AX_070_Motor_Speed\",\n    \"AX_070_Temperature\",\n    \"AX_070_Torque_Utilization\",\n    \"AX_071_Deviation\",\n    \"AX_071_Motor_Speed\",\n    \"AX_071_Temperature\",\n    \"AX_071_Torque_Utilization\",\n    \"AX_072_Deviation\",\n    \"AX_072_Motor_Speed\",\n    \"AX_072_Temperature\",\n    \"AX_072_Torque_Utilization\",\n    \"AX_073_Deviation\",\n    \"AX_073_Motor_Speed\",\n    \"AX_073_Temperature\",\n    \"AX_073_Torque_Utilization\",\n    \"AX_074_Deviation\",\n    \"AX_074_Motor_Speed\",\n    \"AX_074_Temperature\",\n    \"AX_074_Torque_Utilization\",\n    \"AX_075_Deviation\",\n    \"AX_075_Motor_Speed\",\n    \"AX_075_Temperature\",\n    \"AX_075_Torque_Utilization\",\n    \"AX_076_Deviation\",\n    \"AX_076_Motor_Speed\",\n    \"AX_076_Temperature\",\n    \"AX_076_Torque_Utilization\",\n    \"AX_077_Deviation\",\n    \"AX_077_Motor_Speed\",\n    \"AX_077_Temperature\",\n    \"AX_077_Torque_Utilization\",\n    \"AX_078_Deviation\",\n    \"AX_078_Motor_Speed\",\n    \"AX_078_Temperature\",\n    \"AX_078_Torque_Utilization\",\n    \"AX_079_Deviation\",\n    \"AX_079_Motor_Speed\",\n    \"AX_079_Temperature\",\n    \"AX_079_Torque_Utilization\",\n    \"AX_080_Deviation\",\n    \"AX_080_Motor_Speed\",\n    \"AX_080_Temperature\",\n    \"AX_080_Torque_Utilization\",\n    \"AX_081_Deviation\",\n    \"AX_081_Motor_Speed\",\n    \"AX_081_Temperature\",\n    \"AX_081_Torque_Utilization\",\n    \"AX_082_Deviation\",\n    \"AX_082_Motor_Speed\",\n    \"AX_082_Temperature\",\n    \"AX_082_Torque_Utilization\",\n    \"AX_083_Deviation\",\n    \"AX_083_Motor_Speed\",\n    \"AX_083_Temperature\",\n    \"AX_083_Torque_Utilization\",\n    \"AX_084_Deviation\",\n    \"AX_084_Motor_Speed\",\n    \"AX_084_Temperature\",\n    \"AX_084_Torque_Utilization\",\n    \"AX_085_Deviation\",\n    \"AX_085_Motor_Speed\",\n    \"AX_085_Temperature\",\n    \"AX_085_Torque_Utilization\",\n    \"AX_086_Deviation\",\n    \"AX_086_Motor_Speed\",\n    \"AX_086_Temperature\",\n    \"AX_086_Torque_Utilization\",\n    \"AX_087_Deviation\",\n    \"AX_087_Motor_Speed\",\n    \"AX_087_Temperature\",\n    \"AX_087_Torque_Utilization\",\n    \"AX_088_Deviation\",\n    \"AX_088_Motor_Speed\",\n    \"AX_088_Temperature\",\n    \"AX_088_Torque_Utilization\"\n];\n\n// Init out message.\nlet outMsg = { \"payload\": [] };\n\n// Push to out array.\noutMsg.payload.push({\n    \"tagsList\": tagsList,\n    \"connection\": \"d445-2_ak52\",\n    \"data\": msg.payload\n});\n\n// Send out message if something is found.\nif (outMsg.payload.length > 0) {\n    return outMsg;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 820,
        "wires": [
            [
                "5a40af4153752979"
            ]
        ]
    },
    {
        "id": "b61a860d875340d4",
        "type": "function",
        "z": "587d0a516f150445",
        "name": "Variables Mapping",
        "func": "// Init.\nconst cms = global.get(\"ax\", \"file\");\nlet param;\nlet queryParams = [];\nlet cmUDTVars = global.get(\"cmUDTVars\", \"file\");\nlet outMsg = { \"payload\": [] };\nlet queryPayload = { \"payload\": [] };\n\n// Iterate through read datapoints.\nfor (let i = 0; i < msg.payload.length; i++) {\n    for (let j = 0; j < cmUDTVars.length; j++) {\n        if (cmUDTVars[j].opcuaName == msg.payload[i].opcuaName) {\n            // We are filtering those Control Modules and Wastes which are not\n            // used to avoid writing meaningless values into the DB table.\n            param = cms\n                .filter((cm, index) => index == msg.payload[i].axisIndex && cm.description != \"Spare\")\n                .map(((obj) => ({\n                    debug: cmUDTVars[j],\n                    ...obj,\n                    cm_udt_variable_id: cmUDTVars[j].cm_udt_variable_id,\n                    timestamp: msg.payload[i].simotionTs,\n                    opc_timestamp: msg.payload[i].opcTs,\n                    value: msg.payload[i].value\n                })))\n                .map(({ debug, name, description, cm_type_id, ...item }) => item);\n        }\n    }\n\n    // Push to out arrays.\n    outMsg.payload.push({\n        \"opcuaName\": msg.payload[i].opcuaName,\n        \"param\": param,\n        \"simotionTs\": msg.payload[i].simotionTs,\n        \"opcTs\": msg.payload[i].opcTs,\n        \"qc\": msg.payload[i].qc\n    });\n\n    queryParams = [...queryParams, ...param];\n}\n\n// Send out message if something is found.\nif (outMsg.payload.length > 0) {\n    queryPayload.payload = queryParams;\n\n    return [outMsg, queryPayload];\n}",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1270,
        "y": 420,
        "wires": [
            [
                "0b471437863c7510"
            ],
            [
                "30e05c601b8eb970",
                "e131d09270acb181"
            ]
        ]
    },
    {
        "id": "0b471437863c7510",
        "type": "debug",
        "z": "587d0a516f150445",
        "name": "Variables",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1480,
        "y": 380,
        "wires": []
    },
    {
        "id": "30e05c601b8eb970",
        "type": "debug",
        "z": "587d0a516f150445",
        "name": "Variables Values",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1500,
        "y": 420,
        "wires": []
    },
    {
        "id": "c3723a7cf9d1d019",
        "type": "debug",
        "z": "587d0a516f150445",
        "name": "Variables Values Buffer",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1530,
        "y": 460,
        "wires": []
    },
    {
        "id": "e131d09270acb181",
        "type": "split",
        "z": "587d0a516f150445",
        "name": "Variables Values Buffer",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": "50",
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 1290,
        "y": 480,
        "wires": [
            [
                "c3723a7cf9d1d019",
                "3c92e76961daf975"
            ]
        ]
    },
    {
        "id": "7c9d2f0607ffef75",
        "type": "debug",
        "z": "587d0a516f150445",
        "name": "Query Output",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1500,
        "y": 600,
        "wires": []
    },
    {
        "id": "3c92e76961daf975",
        "type": "function",
        "z": "587d0a516f150445",
        "name": "Query",
        "func": "// Send out message if something is found.\nif (msg.payload.length > 0) {\n    // Declaring the tuples of values to be inserted into variables_values DB's table.\n    const rows = [];\n\n    for (let i = 0; i < msg.payload.length; i++) {\n        rows.push(\"(\"\n            + \"'\" + msg.payload[i].timestamp + \"'\" + \", \"\n            + \"'\" + msg.payload[i].opc_timestamp + \"'\" + \", \"\n            + msg.payload[i].value + \", \"\n            + msg.payload[i].cm_udt_variable_id + \", \"\n            + msg.payload[i].cm_id\n            + \")\"\n        );\n    }\n\n    let params = rows.join(\", \");\n\n    msg.query = \"INSERT INTO public.variables_values(\" +\n            \"\\\"timestamp\\\", \" +\n            \"opc_timestamp, \" +\n            \"value, \" +\n            \"cm_udt_variable_id, \" +\n            \"cm_id\" +\n            \")\" +\n        \" VALUES \" +\n            params +\n        \" RETURNING *;\";\n\n    // Debug\n    msg.payload = msg.query;\n\n    return msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1470,
        "y": 500,
        "wires": [
            [
                "8b155930eea29122",
                "4e858ae03d5d7a72"
            ]
        ]
    },
    {
        "id": "4e858ae03d5d7a72",
        "type": "debug",
        "z": "587d0a516f150445",
        "name": "Query",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1610,
        "y": 500,
        "wires": []
    },
    {
        "id": "42e3de7e5c338f1d",
        "type": "catch",
        "z": "587d0a516f150445",
        "name": "Syntax Error",
        "scope": [
            "8b155930eea29122"
        ],
        "uncaught": false,
        "x": 1490,
        "y": 640,
        "wires": [
            [
                "39d5c6da2271a2dc"
            ]
        ]
    },
    {
        "id": "39d5c6da2271a2dc",
        "type": "debug",
        "z": "587d0a516f150445",
        "name": "Debug Error",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1650,
        "y": 640,
        "wires": []
    },
    {
        "id": "8b155930eea29122",
        "type": "postgresql",
        "z": "587d0a516f150445",
        "name": "oee_rt_app4-variables_values",
        "query": "",
        "postgreSQLConfig": "8904b4b641c67a20",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1550,
        "y": 540,
        "wires": [
            [
                "7c9d2f0607ffef75"
            ]
        ]
    },
    {
        "id": "8c2c5d78fd74baa1",
        "type": "inject",
        "z": "03654dd256085b95",
        "g": "e41151ce57424150",
        "name": "Trigger 10 Seconds",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "10",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 180,
        "y": 140,
        "wires": [
            [
                "35997fafedea3624",
                "3e0cb0b291987ee0",
                "6fd3ff81405b4362"
            ]
        ]
    },
    {
        "id": "24937513b651c9f6",
        "type": "debug",
        "z": "03654dd256085b95",
        "g": "e41151ce57424150",
        "name": "Debug agg1",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 870,
        "y": 140,
        "wires": []
    },
    {
        "id": "35997fafedea3624",
        "type": "function",
        "z": "03654dd256085b95",
        "g": "e41151ce57424150",
        "name": "si100_ls10",
        "func": "// Push to out array.\nmsg.queryParameters = {\n    \"samplingInterval\": 100,\n    \"limit\": 15000,\n    \"rn\": 100\n};\n\n// Debug\nmsg.payload = msg.queryParameters;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 100,
        "wires": [
            [
                "8ce9ee871350eefb"
            ]
        ]
    },
    {
        "id": "3e0cb0b291987ee0",
        "type": "function",
        "z": "03654dd256085b95",
        "g": "e41151ce57424150",
        "name": "si1000_ls10",
        "func": "// Push to out array.\nmsg.queryParameters = {\n    \"samplingInterval\": 1000,\n    \"limit\": 1800,\n    \"rn\": 10\n};\n\n// Debug\nmsg.payload = msg.queryParameters;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 180,
        "wires": [
            [
                "3b8ee2f5eedbf569"
            ]
        ]
    },
    {
        "id": "24e4444cde79e752",
        "type": "function",
        "z": "03654dd256085b95",
        "g": "e41151ce57424150",
        "name": "variables_values_agg1",
        "func": "// Send out message if something is found.\nif (msg.payload.length > 0) {\n    // Declaring the tuples of values to be inserted into variables_values_aggX DB's table.\n    const rows = [];\n\n    for (let i = 0; i < msg.payload.length; i++) {\n        rows.push(\"(\"\n            + \"'\" + msg.payload[i].timestamp + \"'\" + \", \"\n            + \"'\" + msg.payload[i].timestamp + \"'\" + \", \"\n            + msg.payload[i].avg_value + \", \"\n            + msg.payload[i].std_value + \", \"\n            + msg.payload[i].cm_udt_variable_id + \", \"\n            + msg.payload[i].cm_id\n            + \")\"\n        );\n    }\n\n    let params = rows.join(\", \");\n\n    msg.query = \"INSERT INTO public.variables_values_agg1(\" +\n        \"\\\"timestamp\\\", \" +\n        \"opc_timestamp, \" +\n        \"avg_value, \" +\n        \"std_value, \" +\n        \"cm_udt_variable_id, \" +\n        \"cm_id\" +\n        \")\" +\n        \" VALUES \" +\n        params +\n        \" RETURNING *;\";\n\n    // Debug\n    msg.payload = msg.query;\n\n    return msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 840,
        "y": 180,
        "wires": [
            [
                "94a03746c1112eee",
                "24937513b651c9f6"
            ]
        ]
    },
    {
        "id": "89f1841d1657e545",
        "type": "function",
        "z": "03654dd256085b95",
        "g": "b9d4a33bb15e970d",
        "name": "siall_ls60",
        "func": "// Push to out array.\nmsg.queryParameters = {\n    \"limit\": 1000,\n    \"rn\": 1\n};\n\n// Debug\nmsg.payload = msg.queryParameters;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 420,
        "wires": [
            [
                "721da0e7acc6352f"
            ]
        ]
    },
    {
        "id": "d05c6f96954e5ece",
        "type": "function",
        "z": "03654dd256085b95",
        "g": "b9d4a33bb15e970d",
        "name": "variables_values_agg2",
        "func": "// Send out message if something is found.\nif (msg.payload.length > 0) {\n    // Declaring the tuples of values to be inserted into variables_values_aggX DB's table.\n    const rows = [];\n\n    for (let i = 0; i < msg.payload.length; i++) {\n        rows.push(\"(\"\n            + \"'\" + msg.payload[i].timestamp + \"'\" + \", \"\n            + \"'\" + msg.payload[i].timestamp + \"'\" + \", \"\n            + msg.payload[i].avg_value + \", \"\n            + msg.payload[i].std_value + \", \"\n            + msg.payload[i].cm_udt_variable_id + \", \"\n            + msg.payload[i].cm_id\n            + \")\"\n        );\n    }\n\n    let params = rows.join(\", \");\n\n    msg.query = \"INSERT INTO public.variables_values_agg3(\" +\n            \"\\\"timestamp\\\", \" +\n            \"opc_timestamp, \" +\n            \"avg_value, \" +\n            \"std_value, \" +\n            \"cm_udt_variable_id, \" +\n            \"cm_id\" +\n            \")\" +\n        \" VALUES \" +\n            params +\n        \" RETURNING *;\";\n\n    // Debug\n    msg.payload = msg.query;\n\n    return msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 840,
        "y": 420,
        "wires": [
            [
                "84136f0329e6306b"
            ]
        ]
    },
    {
        "id": "d248707015035bfd",
        "type": "comment",
        "z": "03654dd256085b95",
        "name": "Every 6 times 10 seconds (1 minute) we trigger an aggregation of values based on the previous 10 seconds aggregation.",
        "info": "Every 6 times 10 seconds (1 minute) we trigger an aggregation of values based on the previous 10 seconds aggregation.",
        "x": 440,
        "y": 560,
        "wires": []
    },
    {
        "id": "6fd3ff81405b4362",
        "type": "function",
        "z": "03654dd256085b95",
        "name": "si60000_ls10",
        "func": "// Push to out array.\nmsg.queryParameters = {\n    \"samplingInterval\": 60000,\n    \"limit\": 200,\n    \"rn\": 1\n};\n\n// Debug\nmsg.payload = msg.queryParameters;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 260,
        "wires": [
            [
                "de99ca6f932f43b1"
            ]
        ]
    },
    {
        "id": "9ce63695655752b1",
        "type": "function",
        "z": "03654dd256085b95",
        "g": "e41151ce57424150",
        "name": "Buffer 1 Minute",
        "func": "let featEngBuffer = global.get(\"featEngBuffer\");\n\nif (msg.payload.length > 0) {\n    let newValues = [];\n\n    for (let i = 0; i < msg.payload.length; i++) {\n        newValues[i] = {\n            \"cm_id\": msg.payload[i].cm_id,\n            \"cm_udt_variable_id\": msg.payload[i].cm_udt_variable_id,\n            \"id\": msg.payload[i].id\n        }\n    }\n\n    if (featEngBuffer !== null) {\n        const outValues = [];\n        let j = 0;\n\n        for (let i = 0; i < msg.payload.length; i++) {\n            // Get current element, which will be used to filter.\n            let currentElement = newValues[i];\n            \n            // Filter current element from buffered values.\n            var bufferedElements = featEngBuffer.filter(function (item) {\n                for (var key in currentElement) {\n                    if (item[key] === undefined || item[key] != currentElement[key]) {\n                        return false\n                    }\n                }\n\n                return true;\n            });\n\n            // Check if it already exists and if not add it to output values.\n            if (bufferedElements.length == 0) {\n                outValues[j] = msg.payload[i];\n                j++;\n            }\n        }\n\n        msg.payload = outValues;\n    }\n\n    global.set(\"featEngBuffer\", newValues);\n    \n    return msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "global.set(\"featEngBuffer\", null);",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 240,
        "wires": [
            [
                "24e4444cde79e752"
            ]
        ]
    },
    {
        "id": "65210f258cc5c610",
        "type": "inject",
        "z": "03654dd256085b95",
        "g": "b9d4a33bb15e970d",
        "name": "Trigger 60 Seconds",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "60",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 180,
        "y": 440,
        "wires": [
            [
                "ec2b80dc397f9d8f"
            ]
        ]
    },
    {
        "id": "ec2b80dc397f9d8f",
        "type": "delay",
        "z": "03654dd256085b95",
        "g": "b9d4a33bb15e970d",
        "name": "Delay 5 s",
        "pauseType": "delay",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 220,
        "y": 380,
        "wires": [
            [
                "89f1841d1657e545"
            ]
        ]
    },
    {
        "id": "6bb23ac992f056bd",
        "type": "debug",
        "z": "03654dd256085b95",
        "g": "e41151ce57424150",
        "name": "Query Output",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1080,
        "y": 240,
        "wires": []
    },
    {
        "id": "cd6a8d3daaa8afd9",
        "type": "debug",
        "z": "03654dd256085b95",
        "g": "b9d4a33bb15e970d",
        "name": "Query Output",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1080,
        "y": 480,
        "wires": []
    },
    {
        "id": "3b8ee2f5eedbf569",
        "type": "postgresql",
        "z": "03654dd256085b95",
        "g": "e41151ce57424150",
        "name": "Query on oee_rt_app4",
        "query": "SELECT TO_CHAR(MAX(timestamp), 'yyyy-mm-dd hh24:mi:ss.ms') AS timestamp,\ncm_id,\ncm_udt_variable_id,\nAVG(value) AS avg_value,\nCOALESCE(STDDEV(value), 0) AS std_value,\nCOUNT(*)\nFROM (\n    SELECT *, ROW_NUMBER()\n    OVER (PARTITION BY cm_id, cm_udt_variable_id ORDER BY a.id DESC) rn \n    FROM (\n        SELECT a.* FROM variables_values a\n        INNER JOIN cm_udt_variables b ON a.cm_udt_variable_id = b.id\n        WHERE b.sampling_interval = $samplingInterval\n        ORDER BY a.id DESC\n        LIMIT $limit\n    ) a\n) a\nWHERE a.rn <= $rn\nGROUP BY cm_id, cm_udt_variable_id;",
        "postgreSQLConfig": "8904b4b641c67a20",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 600,
        "y": 180,
        "wires": [
            [
                "24e4444cde79e752"
            ]
        ]
    },
    {
        "id": "94a03746c1112eee",
        "type": "postgresql",
        "z": "03654dd256085b95",
        "g": "e41151ce57424150",
        "name": "Query to oee_rt_app5 (agg1)",
        "query": "",
        "postgreSQLConfig": "c3edaebc343ed0e7",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1120,
        "y": 180,
        "wires": [
            [
                "6bb23ac992f056bd"
            ]
        ]
    },
    {
        "id": "8ce9ee871350eefb",
        "type": "postgresql",
        "z": "03654dd256085b95",
        "g": "e41151ce57424150",
        "name": "Query on oee_rt_app4",
        "query": "SELECT TO_CHAR(MAX(timestamp), 'yyyy-mm-dd hh24:mi:ss.ms') AS timestamp,\ncm_id,\ncm_udt_variable_id,\nAVG(value) AS avg_value,\nCOALESCE(STDDEV(value), 0) AS std_value,\nCOUNT(*)\nFROM (\n    SELECT *, ROW_NUMBER()\n    OVER (PARTITION BY cm_id, cm_udt_variable_id ORDER BY a.id DESC) rn \n    FROM (\n        SELECT a.* FROM variables_values a\n        INNER JOIN cm_udt_variables b ON a.cm_udt_variable_id = b.id\n        WHERE b.sampling_interval = $samplingInterval\n        ORDER BY a.id DESC\n        LIMIT $limit\n    ) a\n) a\nWHERE a.rn <= $rn\nGROUP BY cm_id, cm_udt_variable_id;",
        "postgreSQLConfig": "8904b4b641c67a20",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 600,
        "y": 100,
        "wires": [
            [
                "24e4444cde79e752"
            ]
        ]
    },
    {
        "id": "721da0e7acc6352f",
        "type": "postgresql",
        "z": "03654dd256085b95",
        "g": "b9d4a33bb15e970d",
        "name": "Query on oee_rt_app5",
        "query": "SELECT TO_CHAR(MAX(timestamp), 'yyyy-mm-dd hh24:mi:ss.ms') AS timestamp,\ncm_id,\ncm_udt_variable_id,\nAVG(avg_value) AS avg_value,\nCOALESCE(STDDEV(avg_value), 0) AS std_value,\nCOUNT(*)\nFROM (\n    SELECT *, ROW_NUMBER()\n    OVER (PARTITION BY cm_id, cm_udt_variable_id ORDER BY a.id DESC) rn \n    FROM (\n        SELECT a.* FROM variables_values_agg1 a\n        INNER JOIN cm_udt_variables b ON a.cm_udt_variable_id = b.id\n        ORDER BY a.id DESC\n        LIMIT $limit\n    ) a\n) a\nWHERE a.rn <= $rn\nGROUP BY cm_id, cm_udt_variable_id;",
        "postgreSQLConfig": "c3edaebc343ed0e7",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 600,
        "y": 420,
        "wires": [
            [
                "d05c6f96954e5ece"
            ]
        ]
    },
    {
        "id": "84136f0329e6306b",
        "type": "postgresql",
        "z": "03654dd256085b95",
        "g": "b9d4a33bb15e970d",
        "name": "Query to oee_rt_app5 (agg2)",
        "query": "",
        "postgreSQLConfig": "c3edaebc343ed0e7",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1120,
        "y": 420,
        "wires": [
            [
                "cd6a8d3daaa8afd9"
            ]
        ]
    },
    {
        "id": "de99ca6f932f43b1",
        "type": "postgresql",
        "z": "03654dd256085b95",
        "g": "e41151ce57424150",
        "name": "Query on oee_rt_app4",
        "query": "SELECT TO_CHAR(MAX(timestamp), 'yyyy-mm-dd hh24:mi:ss.ms') AS timestamp,\ncm_id,\ncm_udt_variable_id,\nAVG(value) AS avg_value,\nCOALESCE(STDDEV(value), 0) AS std_value, \nMAX(id) AS id\nFROM (\n    SELECT *, ROW_NUMBER()\n    OVER (PARTITION BY cm_id, cm_udt_variable_id ORDER BY a.id DESC) rn \n    FROM (\n        SELECT a.* from variables_values a\n        INNER JOIN cm_udt_variables b ON a.cm_udt_variable_id = b.id\n        WHERE b.sampling_interval = $samplingInterval\n        ORDER BY a.id DESC\n        LIMIT $limit\n    ) a\n) a\nWHERE a.rn <= $rn\nGROUP BY cm_id, cm_udt_variable_id;",
        "postgreSQLConfig": "8904b4b641c67a20",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 600,
        "y": 280,
        "wires": [
            [
                "9ce63695655752b1"
            ]
        ]
    }
]